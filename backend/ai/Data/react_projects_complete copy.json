{
  "projects": [
    {
      "project_id": "RP1",
      "project_name": "Click Counter App",
      "description": "A beginner React app that tracks and displays the number of times a button is clicked using useState.",
      "difficulty": "Beginner",
      "tasks": [
        {
          "task_id": "RP1_T1",
          "task_name": "Set Up the React App",
          "description": "Initialize the project and create a welcoming interface.",
          "steps": [
            {
              "step_id": "RP1_T1_S1",
              "step_name": "Install Node.js and npm",
              "description": "Start by installing Node.js and npm on your system.",
              "guidelines": [
                "Download Node.js from the official website (nodejs.org).",
                "Install Node.js which includes npm (Node Package Manager).",
                "Verify installation by running 'node --version' and 'npm --version' in terminal."
              ],
              "why": [
                "Node.js and npm are required to create and run React applications."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T1_S2",
              "step_name": "Use Create React App to scaffold project",
              "description": "Create a new React application using Create React App.",
              "guidelines": [
                "Open terminal and run 'npx create-react-app click-counter-app'.",
                "Wait for the installation to complete.",
                "This creates a new folder with all necessary React files and dependencies."
              ],
              "why": [
                "Create React App provides a pre-configured development environment for React."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T1_S3",
              "step_name": "Navigate into project folder and run npm start",
              "description": "Navigate to the project directory and start the development server.",
              "guidelines": [
                "Change directory to your project: 'cd click-counter-app'.",
                "Start the development server: 'npm start'.",
                "Your browser should automatically open to http://localhost:3000."
              ],
              "why": [
                "This starts the development server and opens your React app in the browser."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP1_T2",
          "task_name": "Create the Counter Component",
          "description": "Build the main counter component with state management.",
          "steps": [
            {
              "step_id": "RP1_T2_S1",
              "step_name": "Create a new file named Counter.js",
              "description": "Create a new component file for the counter functionality.",
              "guidelines": [
                "In the src folder, create a new file called Counter.js.",
                "This file will contain the counter component logic.",
                "Use proper naming convention with capital first letter."
              ],
              "why": [
                "Separating components into different files keeps code organized and reusable."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T2_S2",
              "step_name": "Define a functional component called Counter",
              "description": "Create a functional React component using modern syntax.",
              "guidelines": [
                "Import React at the top of the file.",
                "Create a functional component using arrow function or function declaration.",
                "Export the component as default for easy importing."
              ],
              "why": [
                "Functional components are the modern way to create React components."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T2_S3",
              "step_name": "Import useState and initialize a count variable",
              "description": "Add state management to track the counter value.",
              "guidelines": [
                "Import useState hook from React.",
                "Initialize state with useState(0) to start counter at zero.",
                "Destructure the returned array to get count value and setCount function."
              ],
              "why": [
                "useState hook allows functional components to have state management."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP1_T3",
          "task_name": "Display the Counter and Button",
          "description": "Create the user interface for the counter application.",
          "steps": [
            {
              "step_id": "RP1_T3_S1",
              "step_name": "Return JSX with a <p> showing the count",
              "description": "Display the current count value in the component.",
              "guidelines": [
                "Return JSX from the component function.",
                "Use a paragraph tag to display the count value.",
                "Use curly braces to embed the count variable in JSX."
              ],
              "why": [
                "JSX allows you to write HTML-like syntax in JavaScript to create UI elements."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T3_S2",
              "step_name": "Add a <button> labeled 'Click Me'",
              "description": "Create a button that users can click to increment the counter.",
              "guidelines": [
                "Add a button element below the paragraph.",
                "Set the button text to 'Click Me' or similar.",
                "Ensure the button is properly nested within the JSX return."
              ],
              "why": [
                "The button provides user interaction to trigger the counter increment."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T3_S3",
              "step_name": "Handle onClick event to increment count",
              "description": "Add functionality to increment the counter when button is clicked.",
              "guidelines": [
                "Add an onClick event handler to the button.",
                "Create a function that calls setCount with count + 1.",
                "You can use an inline arrow function or separate function."
              ],
              "why": [
                "Event handlers allow components to respond to user interactions."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T3_S4",
              "step_name": "Test the button to ensure count updates",
              "description": "Verify that the counter works correctly in the browser.",
              "guidelines": [
                "Save your Counter.js file.",
                "Import and use the Counter component in App.js.",
                "Test clicking the button to see if the count increases."
              ],
              "why": [
                "Testing ensures your component works as expected before moving forward."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP1_T4",
          "task_name": "Import and Use the Component",
          "description": "Integrate the counter component into the main application.",
          "steps": [
            {
              "step_id": "RP1_T4_S1",
              "step_name": "Import Counter component in App.js",
              "description": "Add the Counter component to the main App component.",
              "guidelines": [
                "Open App.js file in the src folder.",
                "Add import statement for Counter component at the top.",
                "Use relative path: import Counter from './Counter'."
              ],
              "why": [
                "Importing allows you to use custom components in other parts of your application."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T4_S2",
              "step_name": "Render <Counter /> inside App",
              "description": "Display the Counter component in the main App component.",
              "guidelines": [
                "Replace or add the Counter component in App's return statement.",
                "Use self-closing tag syntax: <Counter />.",
                "Remove any default content you don't need."
              ],
              "why": [
                "This makes the Counter component visible in your application."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP1_T5",
          "task_name": "Add Styling (Optional)",
          "description": "Enhance the visual appearance of the counter application.",
          "steps": [
            {
              "step_id": "RP1_T5_S1",
              "step_name": "Add a CSS file or inline styles",
              "description": "Create styling for the counter component.",
              "guidelines": [
                "Create a Counter.css file or use inline styles.",
                "Add styles for the container, text, and button.",
                "Import CSS file in Counter.js if using external stylesheet."
              ],
              "why": [
                "Styling improves the user experience and visual appeal of your application."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T5_S2",
              "step_name": "Center the button and text",
              "description": "Align the counter elements in the center of the page.",
              "guidelines": [
                "Use CSS flexbox or text-align to center elements.",
                "Apply styles to a container div wrapping your elements.",
                "Set appropriate margins and padding for spacing."
              ],
              "why": [
                "Centered layout creates a more professional and polished appearance."
              ],
              "Output": []
            },
            {
              "step_id": "RP1_T5_S3",
              "step_name": "Add basic button hover effect",
              "description": "Create interactive styling for the button.",
              "guidelines": [
                "Add :hover pseudo-class to button styles.",
                "Change background color, border, or add shadow on hover.",
                "Use CSS transitions for smooth hover effects."
              ],
              "why": [
                "Hover effects provide visual feedback and improve user interaction."
              ],
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP2",
      "project_name": "Task Manager App",
      "description": "A React-based task manager application where users can create, update, delete, and mark tasks as completed.",
      "difficulty": "Beginner",
      "tasks": [
        {
          "task_id": "RP2_T1",
          "task_name": "Set Up the React App",
          "description": "Initialize the project and prepare the development environment.",
          "steps": [
            {
              "step_id": "RP2_T1_S1",
              "step_name": "Install Node.js and create app using CRA",
              "description": "Set up the development environment and create a new React application.",
              "guidelines": [
                "Ensure Node.js is installed on your system.",
                "Run 'npx create-react-app task-manager-app' in terminal.",
                "Wait for the installation process to complete."
              ],
              "why": [
                "This creates the foundation for your React task manager application."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T1_S2",
              "step_name": "Start development server and clean starter files",
              "description": "Launch the development server and remove unnecessary default files.",
              "guidelines": [
                "Navigate to project directory and run 'npm start'.",
                "Remove unnecessary files like logo.svg and App.test.js.",
                "Clean up App.js to have a simple starting structure."
              ],
              "why": [
                "This provides a clean slate to build your task manager application."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP2_T2",
          "task_name": "Create Task Component",
          "description": "Build a reusable component to display individual tasks.",
          "steps": [
            {
              "step_id": "RP2_T2_S1",
              "step_name": "Create a new file Task.js",
              "description": "Create a component file for individual task items.",
              "guidelines": [
                "Create Task.js in the src folder.",
                "Set up the basic functional component structure.",
                "Import React at the top of the file."
              ],
              "why": [
                "Separating task logic into its own component promotes reusability and organization."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T2_S2",
              "step_name": "Use props to accept task data",
              "description": "Configure the component to receive task information via props.",
              "guidelines": [
                "Accept props parameter in the Task function.",
                "Destructure task properties like id, text, and completed.",
                "Display task text and completion status in JSX."
              ],
              "why": [
                "Props allow parent components to pass data to child components."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T2_S3",
              "step_name": "Style the task item with CSS",
              "description": "Add visual styling to make tasks look appealing.",
              "guidelines": [
                "Create Task.css file for component-specific styles.",
                "Style the task container, text, and completion indicators.",
                "Import the CSS file in Task.js."
              ],
              "why": [
                "Good styling improves user experience and makes the app more professional."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP2_T3",
          "task_name": "Build Task List Logic",
          "description": "Implement the core functionality to manage and display multiple tasks.",
          "steps": [
            {
              "step_id": "RP2_T3_S1",
              "step_name": "Use useState to manage task list",
              "description": "Set up state management for the collection of tasks.",
              "guidelines": [
                "Import useState hook in App.js.",
                "Initialize state with an empty array or sample tasks.",
                "Create state variable and setter function for tasks."
              ],
              "why": [
                "State management is essential for tracking and updating the task list."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T3_S2",
              "step_name": "Map over tasks and render Task components",
              "description": "Display all tasks by iterating through the task array.",
              "guidelines": [
                "Use the map() method to iterate over the tasks array.",
                "Return a Task component for each task in the array.",
                "Pass task data as props to each Task component."
              ],
              "why": [
                "Mapping allows you to dynamically render components based on data."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T3_S3",
              "step_name": "Assign unique keys to list items",
              "description": "Add unique identifiers to each rendered task for React optimization.",
              "guidelines": [
                "Add a key prop to each Task component in the map function.",
                "Use task.id or array index as the key value.",
                "Ensure each key is unique within the list."
              ],
              "why": [
                "Keys help React efficiently update the DOM when the list changes."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T3_S4",
              "step_name": "Test rendering with static data",
              "description": "Verify that tasks display correctly with sample data.",
              "guidelines": [
                "Create an array of sample task objects with id, text, and completed properties.",
                "Set this array as the initial state value.",
                "Check that all tasks render properly in the browser."
              ],
              "why": [
                "Testing with static data ensures your rendering logic works before adding dynamic features."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP2_T4",
          "task_name": "Implement Add Task Feature",
          "description": "Create functionality to add new tasks to the list.",
          "steps": [
            {
              "step_id": "RP2_T4_S1",
              "step_name": "Add input field and button",
              "description": "Create UI elements for task input.",
              "guidelines": [
                "Add an input field for typing new task text.",
                "Add a button to submit the new task.",
                "Place these elements above the task list."
              ],
              "why": [
                "Input elements provide the interface for users to add new tasks."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T4_S2",
              "step_name": "Track input with useState",
              "description": "Manage the input field value with React state.",
              "guidelines": [
                "Create state for the input value using useState.",
                "Add onChange handler to update state when user types.",
                "Set the input's value prop to the state variable."
              ],
              "why": [
                "Controlled inputs ensure React manages the input value and enables form handling."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T4_S3",
              "step_name": "Update task list on form submit",
              "description": "Add new tasks to the task array when form is submitted.",
              "guidelines": [
                "Create a function to handle form submission.",
                "Generate a new task object with unique id, input text, and completed: false.",
                "Use the spread operator to add the new task to the existing array."
              ],
              "why": [
                "This functionality allows users to dynamically add tasks to their list."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T4_S4",
              "step_name": "Reset input after adding",
              "description": "Clear the input field after successfully adding a task.",
              "guidelines": [
                "Set the input state back to empty string after adding task.",
                "Prevent form submission if input is empty.",
                "Consider adding form validation for better user experience."
              ],
              "why": [
                "Resetting the input provides clear feedback and prepares for the next task entry."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP2_T5",
          "task_name": "Enable Delete and Complete",
          "description": "Add functionality to remove tasks and mark them as completed.",
          "steps": [
            {
              "step_id": "RP2_T5_S1",
              "step_name": "Add delete button in Task",
              "description": "Include a delete button in each task component.",
              "guidelines": [
                "Add a delete button to the Task component JSX.",
                "Style the button to be clearly identifiable as a delete action.",
                "Accept an onDelete function as a prop from the parent component."
              ],
              "why": [
                "Delete buttons allow users to remove tasks they no longer need."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T5_S2",
              "step_name": "Use onClick to filter out task",
              "description": "Implement the delete functionality by removing tasks from the array.",
              "guidelines": [
                "Create a delete function in the parent component.",
                "Use filter() method to remove the task with matching id.",
                "Pass this function to Task components as a prop."
              ],
              "why": [
                "Filtering creates a new array without the deleted task, updating the UI."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T5_S3",
              "step_name": "Add checkbox or toggle for completion",
              "description": "Create UI element to mark tasks as completed.",
              "guidelines": [
                "Add a checkbox input to each Task component.",
                "Set the checked property based on task.completed.",
                "Create an onChange handler to toggle completion status."
              ],
              "why": [
                "Completion toggles allow users to track their progress on tasks."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T5_S4",
              "step_name": "Style completed tasks with line-through",
              "description": "Visually distinguish completed tasks from active ones.",
              "guidelines": [
                "Add conditional CSS class based on task.completed status.",
                "Create CSS rule with text-decoration: line-through for completed tasks.",
                "Consider changing text color or opacity for completed tasks."
              ],
              "why": [
                "Visual feedback helps users quickly identify completed vs. pending tasks."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP2_T6",
          "task_name": "Filter and Sort Tasks (Optional)",
          "description": "Add advanced features to organize and view tasks.",
          "steps": [
            {
              "step_id": "RP2_T6_S1",
              "step_name": "Add filter for completed vs active",
              "description": "Create options to view different subsets of tasks.",
              "guidelines": [
                "Add filter buttons or dropdown for All, Active, and Completed tasks.",
                "Create state to track current filter selection.",
                "Filter the tasks array before mapping to Task components."
              ],
              "why": [
                "Filtering helps users focus on specific types of tasks."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T6_S2",
              "step_name": "Add dropdown or toggle for sorting",
              "description": "Implement sorting options for task organization.",
              "guidelines": [
                "Create sorting options like alphabetical, date created, or completion status.",
                "Add UI controls for users to select sorting method.",
                "Sort the tasks array before rendering."
              ],
              "why": [
                "Sorting helps users organize tasks according to their preferences."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T6_S3",
              "step_name": "Use useEffect or a derived list",
              "description": "Optimize filtering and sorting performance.",
              "guidelines": [
                "Consider using useMemo for expensive filtering/sorting operations.",
                "Use useEffect to update filtered lists when dependencies change.",
                "Ensure UI updates smoothly when filters or sorts change."
              ],
              "why": [
                "Performance optimization ensures the app remains responsive with many tasks."
              ],
              "Output": []
            },
            {
              "step_id": "RP2_T6_S4",
              "step_name": "Ensure UI reflects changes live",
              "description": "Verify that all filtering and sorting updates happen immediately.",
              "guidelines": [
                "Test all filter combinations to ensure they work correctly.",
                "Verify that adding, deleting, or completing tasks updates filtered views.",
                "Ensure sorting persists when tasks are modified."
              ],
              "why": [
                "Real-time updates provide immediate feedback and better user experience."
              ],
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP3",
      "project_name": "Weather Dashboard",
      "description": "Build a React weather dashboard that fetches data from a public API and displays weather conditions for multiple cities, including temperature, humidity, and forecast.",
      "difficulty": "Beginner",
      "tasks": [
        {
          "task_id": "RP3_T1",
          "task_name": "Initialize Weather Dashboard App",
          "description": "Set up the project foundation and required dependencies.",
          "steps": [
            {
              "step_id": "RP3_T1_S1",
              "step_name": "Create project using Create React App",
              "description": "Initialize a new React application for the weather dashboard.",
              "guidelines": [
                "Run 'npx create-react-app weather-dashboard' in your terminal.",
                "Navigate to the project directory after creation.",
                "Start the development server to verify setup."
              ],
              "why": [
                "Create React App provides a solid foundation with all necessary build tools configured."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T1_S2",
              "step_name": "Install Axios for API calls",
              "description": "Add HTTP client library for making API requests.",
              "guidelines": [
                "Run 'npm install axios' in the project directory.",
                "Verify installation by checking package.json dependencies.",
                "Import axios in components where API calls will be made."
              ],
              "why": [
                "Axios simplifies HTTP requests and provides better error handling than fetch."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T1_S3",
              "step_name": "Add .env file for API key storage",
              "description": "Set up environment variables for secure API key management.",
              "guidelines": [
                "Create a .env file in the project root directory.",
                "Add your API key with REACT_APP_ prefix for React access.",
                "Add .env to .gitignore to keep API keys secure."
              ],
              "why": [
                "Environment variables keep sensitive information like API keys secure and configurable."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP3_T2",
          "task_name": "Create Layout Components",
          "description": "Build the basic UI structure and reusable components.",
          "steps": [
            {
              "step_id": "RP3_T2_S1",
              "step_name": "Create Header, SearchBar, and WeatherCard components",
              "description": "Build the main UI components for the weather dashboard.",
              "guidelines": [
                "Create separate files for Header.js, SearchBar.js, and WeatherCard.js.",
                "Set up basic functional component structure for each.",
                "Plan the props each component will need to receive."
              ],
              "why": [
                "Modular components make the code more maintainable and reusable."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T2_S2",
              "step_name": "Use props to pass data",
              "description": "Configure components to receive and display data via props.",
              "guidelines": [
                "Define prop interfaces for each component.",
                "Pass weather data from parent to child components.",
                "Handle cases where props might be undefined or null."
              ],
              "why": [
                "Props enable data flow between components and make them flexible."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T2_S3",
              "step_name": "Style layout with CSS or a library",
              "description": "Add visual styling to make the dashboard attractive and functional.",
              "guidelines": [
                "Create CSS files for each component or use a CSS framework.",
                "Implement responsive design for mobile and desktop.",
                "Use consistent color scheme and typography."
              ],
              "why": [
                "Good styling improves user experience and makes the app professional."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP3_T3",
          "task_name": "Integrate OpenWeatherMap API",
          "description": "Connect to weather API service to fetch real weather data.",
          "steps": [
            {
              "step_id": "RP3_T3_S1",
              "step_name": "Register and get API key from OpenWeatherMap",
              "description": "Set up account and obtain API credentials.",
              "guidelines": [
                "Visit openweathermap.org and create a free account.",
                "Navigate to API keys section and generate a new key.",
                "Store the API key in your .env file securely."
              ],
              "why": [
                "API key is required to authenticate requests to the weather service."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T3_S2",
              "step_name": "Create Axios GET request for current weather",
              "description": "Implement function to fetch weather data for a specific city.",
              "guidelines": [
                "Create an async function that takes city name as parameter.",
                "Use axios.get() with the OpenWeatherMap API endpoint.",
                "Include API key and city name in the request URL."
              ],
              "why": [
                "This function will be the core of your weather data fetching functionality."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T3_S3",
              "step_name": "Handle success and error responses",
              "description": "Implement proper error handling and response processing.",
              "guidelines": [
                "Use try-catch blocks to handle API errors gracefully.",
                "Check response status and data validity.",
                "Provide user-friendly error messages for different scenarios."
              ],
              "why": [
                "Error handling ensures your app works reliably even when API calls fail."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T3_S4",
              "step_name": "Test API with a static city",
              "description": "Verify API integration works correctly with test data.",
              "guidelines": [
                "Call your API function with a known city name like 'London'.",
                "Log the response to console to verify data structure.",
                "Test both successful requests and error scenarios."
              ],
              "why": [
                "Testing ensures your API integration works before building the UI around it."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP3_T4",
          "task_name": "Implement Search Functionality",
          "description": "Create user interface for searching weather by city name.",
          "steps": [
            {
              "step_id": "RP3_T4_S1",
              "step_name": "Capture input from search field",
              "description": "Set up controlled input for city name entry.",
              "guidelines": [
                "Use useState to manage search input value.",
                "Add onChange handler to update state as user types.",
                "Set input value prop to the state variable."
              ],
              "why": [
                "Controlled inputs ensure React manages the form state properly."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T4_S2",
              "step_name": "Trigger API request on button click or Enter",
              "description": "Implement search trigger mechanisms for better UX.",
              "guidelines": [
                "Add onClick handler to search button.",
                "Add onKeyPress handler to input for Enter key detection.",
                "Call your weather API function with the input value."
              ],
              "why": [
                "Multiple trigger options provide flexible user interaction."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T4_S3",
              "step_name": "Display weather card using API response",
              "description": "Show weather data in a formatted card component.",
              "guidelines": [
                "Store API response in component state.",
                "Pass weather data to WeatherCard component as props.",
                "Handle loading states while API request is in progress."
              ],
              "why": [
                "Displaying data completes the search-to-display workflow."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP3_T5",
          "task_name": "Display Weather Data",
          "description": "Format and present weather information in an attractive layout.",
          "steps": [
            {
              "step_id": "RP3_T5_S1",
              "step_name": "Extract temperature, humidity, and conditions",
              "description": "Parse relevant data from the API response.",
              "guidelines": [
                "Access temperature from response.main.temp.",
                "Get humidity from response.main.humidity.",
                "Extract weather conditions from response.weather[0].description."
              ],
              "why": [
                "Extracting specific data points makes the information more useful to users."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T5_S2",
              "step_name": "Format and display date/time",
              "description": "Show current date and time information clearly.",
              "guidelines": [
                "Use JavaScript Date object to get current date/time.",
                "Format date using toLocaleDateString() or similar methods.",
                "Display time in user-friendly format."
              ],
              "why": [
                "Date/time context helps users understand when the weather data was retrieved."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T5_S3",
              "step_name": "Add weather icon from API response",
              "description": "Include visual weather icons to enhance the display.",
              "guidelines": [
                "Get icon code from response.weather[0].icon.",
                "Use OpenWeatherMap icon URL format to display icons.",
                "Add alt text for accessibility."
              ],
              "why": [
                "Visual icons make weather conditions immediately recognizable."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP3_T6",
          "task_name": "Add Multiple City Support",
          "description": "Enable users to track weather for multiple cities simultaneously.",
          "steps": [
            {
              "step_id": "RP3_T6_S1",
              "step_name": "Allow user to enter and save multiple cities",
              "description": "Implement functionality to add cities to a watchlist.",
              "guidelines": [
                "Create state array to store multiple city weather data.",
                "Add new cities to the array when searched.",
                "Prevent duplicate cities from being added."
              ],
              "why": [
                "Multiple city support makes the dashboard more useful for users who travel or have interests in various locations."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T6_S2",
              "step_name": "Display each city's weather in a card",
              "description": "Show all tracked cities in individual weather cards.",
              "guidelines": [
                "Map over the cities array to render multiple WeatherCard components.",
                "Ensure each card has unique key prop.",
                "Arrange cards in a responsive grid layout."
              ],
              "why": [
                "Individual cards provide clear separation and easy comparison between cities."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T6_S3",
              "step_name": "Store cities in state and map over them",
              "description": "Implement proper state management for multiple cities.",
              "guidelines": [
                "Use useState to manage array of city weather objects.",
                "Update state immutably when adding new cities.",
                "Consider adding remove functionality for individual cities."
              ],
              "why": [
                "Proper state management ensures the UI updates correctly when cities are added or removed."
              ],
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP3_T7",
          "task_name": "Optional Features and Enhancements",
          "description": "Add advanced features to improve user experience and functionality.",
          "steps": [
            {
              "step_id": "RP3_T7_S1",
              "step_name": "Add localStorage to persist city list",
              "description": "Save user's city list between browser sessions.",
              "guidelines": [
                "Use localStorage.setItem() to save cities array.",
                "Use localStorage.getItem() to restore cities on app load.",
                "Handle cases where localStorage might be unavailable."
              ],
              "why": [
                "Persistence improves user experience by remembering their preferences."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T7_S2",
              "step_name": "Add forecast for next 3–5 days",
              "description": "Extend functionality to show weather forecasts.",
              "guidelines": [
                "Use OpenWeatherMap forecast API endpoint.",
                "Parse forecast data for multiple days.",
                "Create forecast display component."
              ],
              "why": [
                "Forecast data provides more value to users planning ahead."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T7_S3",
              "step_name": "Add loading state and error message display",
              "description": "Improve user feedback during API operations.",
              "guidelines": [
                "Show loading spinner or message during API calls.",
                "Display user-friendly error messages for failed requests.",
                "Handle different types of errors (network, invalid city, etc.)."
              ],
              "why": [
                "Good loading and error states provide better user experience."
              ],
              "Output": []
            },
            {
              "step_id": "RP3_T7_S4",
              "step_name": "Support Celsius/Fahrenheit toggle",
              "description": "Allow users to choose their preferred temperature unit.",
              "guidelines": [
                "Add toggle button or dropdown for temperature units.",
                "Convert temperatures between Celsius and Fahrenheit.",
                "Store user preference in localStorage."
              ],
              "why": [
                "Temperature unit preference varies by location and user preference."
              ],
              "starting_code": "// Start: Support Celsius/Fahrenheit toggle",
              "final_code": "// Completed: Support Celsius/Fahrenheit toggle",
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP4",
      "project_name": "Expense Tracker",
      "description": "Build an expense tracker in React that allows users to add, view, categorize, and delete expenses, with a live balance and visual charts.",
      "difficulty": "Intermediate",
      "tasks": [
        {
          "task_id": "RP4_T1",
          "task_name": "Initialize React Project",
          "description": "Initialize React Project in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T1_S1",
              "step_name": "Set up using Create React App",
              "description": "This step teaches you to set up using create react app.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Set up using Create React App' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Set up using Create React App",
              "final_code": "// Finalize: Set up using Create React App",
              "Output": []
            },
            {
              "step_id": "RP4_T1_S2",
              "step_name": "Clean up default files and folders",
              "description": "This step teaches you to clean up default files and folders.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Clean up default files and folders' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Clean up default files and folders",
              "final_code": "// Finalize: Clean up default files and folders",
              "Output": []
            },
            {
              "step_id": "RP4_T1_S3",
              "step_name": "Install Chart.js for visualizations",
              "description": "This step teaches you to install chart.js for visualizations.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Install Chart.js for visualizations' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Install Chart.js for visualizations",
              "final_code": "// Finalize: Install Chart.js for visualizations",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T2",
          "task_name": "Create Data Models and Structure",
          "description": "Create Data Models and Structure in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T2_S1",
              "step_name": "Define expense object structure",
              "description": "This step teaches you to define expense object structure.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Define expense object structure' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Define expense object structure",
              "final_code": "// Finalize: Define expense object structure",
              "Output": []
            },
            {
              "step_id": "RP4_T2_S2",
              "step_name": "Plan folder structure for components and utils",
              "description": "This step teaches you to plan folder structure for components and utils.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Plan folder structure for components and utils' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Plan folder structure for components and utils",
              "final_code": "// Finalize: Plan folder structure for components and utils",
              "Output": []
            },
            {
              "step_id": "RP4_T2_S3",
              "step_name": "Setup dummy data for testing",
              "description": "This step teaches you to setup dummy data for testing.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Setup dummy data for testing' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Setup dummy data for testing",
              "final_code": "// Finalize: Setup dummy data for testing",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T3",
          "task_name": "Build Input Form for Transactions",
          "description": "Build Input Form for Transactions in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T3_S1",
              "step_name": "Create a form component for title, amount, and category",
              "description": "This step teaches you to create a form component for title, amount, and category.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Create a form component for title, amount, and category' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Create a form component for title, amount, and category",
              "final_code": "// Finalize: Create a form component for title, amount, and category",
              "Output": []
            },
            {
              "step_id": "RP4_T3_S2",
              "step_name": "Use useState to track input fields",
              "description": "This step teaches you to use usestate to track input fields.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Use useState to track input fields' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Use useState to track input fields",
              "final_code": "// Finalize: Use useState to track input fields",
              "Output": []
            },
            {
              "step_id": "RP4_T3_S3",
              "step_name": "Add form validation for required fields",
              "description": "This step teaches you to add form validation for required fields.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Add form validation for required fields' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Add form validation for required fields",
              "final_code": "// Finalize: Add form validation for required fields",
              "Output": []
            },
            {
              "step_id": "RP4_T3_S4",
              "step_name": "Clear fields after successful submission",
              "description": "This step teaches you to clear fields after successful submission.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Clear fields after successful submission' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Clear fields after successful submission",
              "final_code": "// Finalize: Clear fields after successful submission",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T4",
          "task_name": "Manage Expense State with useState",
          "description": "Manage Expense State with useState in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T4_S1",
              "step_name": "Create state array to store expenses",
              "description": "This step teaches you to create state array to store expenses.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Create state array to store expenses' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Create state array to store expenses",
              "final_code": "// Finalize: Create state array to store expenses",
              "Output": []
            },
            {
              "step_id": "RP4_T4_S2",
              "step_name": "Add new expenses to array",
              "description": "This step teaches you to add new expenses to array.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Add new expenses to array' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Add new expenses to array",
              "final_code": "// Finalize: Add new expenses to array",
              "Output": []
            },
            {
              "step_id": "RP4_T4_S3",
              "step_name": "Pass down state via props to child components",
              "description": "This step teaches you to pass down state via props to child components.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Pass down state via props to child components' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Pass down state via props to child components",
              "final_code": "// Finalize: Pass down state via props to child components",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T5",
          "task_name": "Display Expenses in a List",
          "description": "Display Expenses in a List in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T5_S1",
              "step_name": "Create ExpenseList component",
              "description": "This step teaches you to create expenselist component.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Create ExpenseList component' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Create ExpenseList component",
              "final_code": "// Finalize: Create ExpenseList component",
              "Output": []
            },
            {
              "step_id": "RP4_T5_S2",
              "step_name": "Render each item using ExpenseItem subcomponent",
              "description": "This step teaches you to render each item using expenseitem subcomponent.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Render each item using ExpenseItem subcomponent' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Render each item using ExpenseItem subcomponent",
              "final_code": "// Finalize: Render each item using ExpenseItem subcomponent",
              "Output": []
            },
            {
              "step_id": "RP4_T5_S3",
              "step_name": "Style using conditional formatting based on amount",
              "description": "This step teaches you to style using conditional formatting based on amount.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Style using conditional formatting based on amount' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Style using conditional formatting based on amount",
              "final_code": "// Finalize: Style using conditional formatting based on amount",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T6",
          "task_name": "Calculate and Display Balance",
          "description": "Calculate and Display Balance in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T6_S1",
              "step_name": "Compute total income and expenses",
              "description": "This step teaches you to compute total income and expenses.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Compute total income and expenses' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Compute total income and expenses",
              "final_code": "// Finalize: Compute total income and expenses",
              "Output": []
            },
            {
              "step_id": "RP4_T6_S2",
              "step_name": "Show live balance at top of dashboard",
              "description": "This step teaches you to show live balance at top of dashboard.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Show live balance at top of dashboard' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Show live balance at top of dashboard",
              "final_code": "// Finalize: Show live balance at top of dashboard",
              "Output": []
            },
            {
              "step_id": "RP4_T6_S3",
              "step_name": "Highlight balance as positive or negative",
              "description": "This step teaches you to highlight balance as positive or negative.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Highlight balance as positive or negative' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Highlight balance as positive or negative",
              "final_code": "// Finalize: Highlight balance as positive or negative",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T7",
          "task_name": "Integrate Chart for Insights",
          "description": "Integrate Chart for Insights in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T7_S1",
              "step_name": "Use Chart.js to show category-wise distribution",
              "description": "This step teaches you to use chart.js to show category-wise distribution.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Use Chart.js to show category-wise distribution' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Use Chart.js to show category-wise distribution",
              "final_code": "// Finalize: Use Chart.js to show category-wise distribution",
              "Output": []
            },
            {
              "step_id": "RP4_T7_S2",
              "step_name": "Convert state data to chart-friendly format",
              "description": "This step teaches you to convert state data to chart-friendly format.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Convert state data to chart-friendly format' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Convert state data to chart-friendly format",
              "final_code": "// Finalize: Convert state data to chart-friendly format",
              "Output": []
            },
            {
              "step_id": "RP4_T7_S3",
              "step_name": "Style and update chart in real-time",
              "description": "This step teaches you to style and update chart in real-time.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Style and update chart in real-time' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Style and update chart in real-time",
              "final_code": "// Finalize: Style and update chart in real-time",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T8",
          "task_name": "Implement Delete Functionality",
          "description": "Implement Delete Functionality in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T8_S1",
              "step_name": "Add delete button in ExpenseItem",
              "description": "This step teaches you to add delete button in expenseitem.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Add delete button in ExpenseItem' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Add delete button in ExpenseItem",
              "final_code": "// Finalize: Add delete button in ExpenseItem",
              "Output": []
            },
            {
              "step_id": "RP4_T8_S2",
              "step_name": "Filter out deleted item from state",
              "description": "This step teaches you to filter out deleted item from state.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Filter out deleted item from state' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Filter out deleted item from state",
              "final_code": "// Finalize: Filter out deleted item from state",
              "Output": []
            },
            {
              "step_id": "RP4_T8_S3",
              "step_name": "Add confirmation before deletion",
              "description": "This step teaches you to add confirmation before deletion.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Add confirmation before deletion' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Add confirmation before deletion",
              "final_code": "// Finalize: Add confirmation before deletion",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP4_T9",
          "task_name": "Add Persistence with Local Storage",
          "description": "Add Persistence with Local Storage in the Expense Tracker project.",
          "steps": [
            {
              "step_id": "RP4_T9_S1",
              "step_name": "Save expenses to localStorage on state update",
              "description": "This step teaches you to save expenses to localstorage on state update.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Save expenses to localStorage on state update' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Save expenses to localStorage on state update",
              "final_code": "// Finalize: Save expenses to localStorage on state update",
              "Output": []
            },
            {
              "step_id": "RP4_T9_S2",
              "step_name": "Retrieve data on initial render using useEffect",
              "description": "This step teaches you to retrieve data on initial render using useeffect.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Retrieve data on initial render using useEffect' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Retrieve data on initial render using useEffect",
              "final_code": "// Finalize: Retrieve data on initial render using useEffect",
              "Output": []
            },
            {
              "step_id": "RP4_T9_S3",
              "step_name": "Test data persistence across page reloads",
              "description": "This step teaches you to test data persistence across page reloads.",
              "guidelines": [
                "Use modular component design.",
                "Keep UI responsive and accessible.",
                "Avoid direct mutation of state arrays."
              ],
              "why": [
                "'Test data persistence across page reloads' helps build core functionality for managing and displaying expenses."
              ],
              "starting_code": "// Begin: Test data persistence across page reloads",
              "final_code": "// Finalize: Test data persistence across page reloads",
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP5",
      "project_name": "Authentication App",
      "description": "Build a secure React authentication app with login, signup, logout, route protection, and localStorage/token-based session persistence.",
      "difficulty": "Intermediate",
      "tasks": [
        {
          "task_id": "RP5_T1",
          "task_name": "Initialize React App and Router",
          "description": "Initialize React App and Router in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T1_S1",
              "step_name": "Set up React app using CRA",
              "description": "This step covers how to set up react app using cra.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Set up React app using CRA' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Set up React app using CRA",
              "final_code": "// Final implementation for: Set up React app using CRA",
              "Output": []
            },
            {
              "step_id": "RP5_T1_S2",
              "step_name": "Install and configure React Router",
              "description": "This step covers how to install and configure react router.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Install and configure React Router' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Install and configure React Router",
              "final_code": "// Final implementation for: Install and configure React Router",
              "Output": []
            },
            {
              "step_id": "RP5_T1_S3",
              "step_name": "Create public and protected routes",
              "description": "This step covers how to create public and protected routes.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Create public and protected routes' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Create public and protected routes",
              "final_code": "// Final implementation for: Create public and protected routes",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T2",
          "task_name": "Create Auth Context and Provider",
          "description": "Create Auth Context and Provider in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T2_S1",
              "step_name": "Set up AuthContext with createContext()",
              "description": "This step covers how to set up authcontext with createcontext().",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Set up AuthContext with createContext()' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Set up AuthContext with createContext()",
              "final_code": "// Final implementation for: Set up AuthContext with createContext()",
              "Output": []
            },
            {
              "step_id": "RP5_T2_S2",
              "step_name": "Provide login, logout, and user state functions",
              "description": "This step covers how to provide login, logout, and user state functions.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Provide login, logout, and user state functions' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Provide login, logout, and user state functions",
              "final_code": "// Final implementation for: Provide login, logout, and user state functions",
              "Output": []
            },
            {
              "step_id": "RP5_T2_S3",
              "step_name": "Wrap app with AuthProvider",
              "description": "This step covers how to wrap app with authprovider.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Wrap app with AuthProvider' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Wrap app with AuthProvider",
              "final_code": "// Final implementation for: Wrap app with AuthProvider",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T3",
          "task_name": "Build Signup Form",
          "description": "Build Signup Form in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T3_S1",
              "step_name": "Create a form with name, email, and password",
              "description": "This step covers how to create a form with name, email, and password.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Create a form with name, email, and password' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Create a form with name, email, and password",
              "final_code": "// Final implementation for: Create a form with name, email, and password",
              "Output": []
            },
            {
              "step_id": "RP5_T3_S2",
              "step_name": "Add input validation and error display",
              "description": "This step covers how to add input validation and error display.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Add input validation and error display' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Add input validation and error display",
              "final_code": "// Final implementation for: Add input validation and error display",
              "Output": []
            },
            {
              "step_id": "RP5_T3_S3",
              "step_name": "Simulate API call or connect to backend",
              "description": "This step covers how to simulate api call or connect to backend.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Simulate API call or connect to backend' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Simulate API call or connect to backend",
              "final_code": "// Final implementation for: Simulate API call or connect to backend",
              "Output": []
            },
            {
              "step_id": "RP5_T3_S4",
              "step_name": "Redirect user to login or dashboard",
              "description": "This step covers how to redirect user to login or dashboard.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Redirect user to login or dashboard' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Redirect user to login or dashboard",
              "final_code": "// Final implementation for: Redirect user to login or dashboard",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T4",
          "task_name": "Build Login Form",
          "description": "Build Login Form in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T4_S1",
              "step_name": "Create login form with email and password",
              "description": "This step covers how to create login form with email and password.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Create login form with email and password' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Create login form with email and password",
              "final_code": "// Final implementation for: Create login form with email and password",
              "Output": []
            },
            {
              "step_id": "RP5_T4_S2",
              "step_name": "Add input validation and error handling",
              "description": "This step covers how to add input validation and error handling.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Add input validation and error handling' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Add input validation and error handling",
              "final_code": "// Final implementation for: Add input validation and error handling",
              "Output": []
            },
            {
              "step_id": "RP5_T4_S3",
              "step_name": "Call login function from context on submit",
              "description": "This step covers how to call login function from context on submit.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Call login function from context on submit' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Call login function from context on submit",
              "final_code": "// Final implementation for: Call login function from context on submit",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T5",
          "task_name": "Implement Route Protection",
          "description": "Implement Route Protection in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T5_S1",
              "step_name": "Create ProtectedRoute component",
              "description": "This step covers how to create protectedroute component.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Create ProtectedRoute component' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Create ProtectedRoute component",
              "final_code": "// Final implementation for: Create ProtectedRoute component",
              "Output": []
            },
            {
              "step_id": "RP5_T5_S2",
              "step_name": "Check if user is authenticated before rendering route",
              "description": "This step covers how to check if user is authenticated before rendering route.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Check if user is authenticated before rendering route' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Check if user is authenticated before rendering route",
              "final_code": "// Final implementation for: Check if user is authenticated before rendering route",
              "Output": []
            },
            {
              "step_id": "RP5_T5_S3",
              "step_name": "Redirect unauthenticated users to login",
              "description": "This step covers how to redirect unauthenticated users to login.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Redirect unauthenticated users to login' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Redirect unauthenticated users to login",
              "final_code": "// Final implementation for: Redirect unauthenticated users to login",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T6",
          "task_name": "Add Logout and Navigation Links",
          "description": "Add Logout and Navigation Links in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T6_S1",
              "step_name": "Display logout button in navbar when logged in",
              "description": "This step covers how to display logout button in navbar when logged in.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Display logout button in navbar when logged in' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Display logout button in navbar when logged in",
              "final_code": "// Final implementation for: Display logout button in navbar when logged in",
              "Output": []
            },
            {
              "step_id": "RP5_T6_S2",
              "step_name": "Call logout function to clear user and tokens",
              "description": "This step covers how to call logout function to clear user and tokens.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Call logout function to clear user and tokens' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Call logout function to clear user and tokens",
              "final_code": "// Final implementation for: Call logout function to clear user and tokens",
              "Output": []
            },
            {
              "step_id": "RP5_T6_S3",
              "step_name": "Redirect to login page on logout",
              "description": "This step covers how to redirect to login page on logout.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Redirect to login page on logout' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Redirect to login page on logout",
              "final_code": "// Final implementation for: Redirect to login page on logout",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T7",
          "task_name": "Store Tokens in Local Storage",
          "description": "Store Tokens in Local Storage in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T7_S1",
              "step_name": "Save auth state or token to localStorage on login",
              "description": "This step covers how to save auth state or token to localstorage on login.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Save auth state or token to localStorage on login' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Save auth state or token to localStorage on login",
              "final_code": "// Final implementation for: Save auth state or token to localStorage on login",
              "Output": []
            },
            {
              "step_id": "RP5_T7_S2",
              "step_name": "Read token from localStorage on app load",
              "description": "This step covers how to read token from localstorage on app load.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Read token from localStorage on app load' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Read token from localStorage on app load",
              "final_code": "// Final implementation for: Read token from localStorage on app load",
              "Output": []
            },
            {
              "step_id": "RP5_T7_S3",
              "step_name": "Use useEffect to auto-login on page refresh",
              "description": "This step covers how to use useeffect to auto-login on page refresh.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Use useEffect to auto-login on page refresh' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Use useEffect to auto-login on page refresh",
              "final_code": "// Final implementation for: Use useEffect to auto-login on page refresh",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T8",
          "task_name": "Add Profile Page (Optional)",
          "description": "Add Profile Page (Optional) in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T8_S1",
              "step_name": "Create route and page for viewing profile info",
              "description": "This step covers how to create route and page for viewing profile info.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Create route and page for viewing profile info' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Create route and page for viewing profile info",
              "final_code": "// Final implementation for: Create route and page for viewing profile info",
              "Output": []
            },
            {
              "step_id": "RP5_T8_S2",
              "step_name": "Fetch and display user data",
              "description": "This step covers how to fetch and display user data.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Fetch and display user data' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Fetch and display user data",
              "final_code": "// Final implementation for: Fetch and display user data",
              "Output": []
            },
            {
              "step_id": "RP5_T8_S3",
              "step_name": "Style profile card with avatar and details",
              "description": "This step covers how to style profile card with avatar and details.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Style profile card with avatar and details' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Style profile card with avatar and details",
              "final_code": "// Final implementation for: Style profile card with avatar and details",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP5_T9",
          "task_name": "Error Handling and UX Polish",
          "description": "Error Handling and UX Polish in the Authentication App project.",
          "steps": [
            {
              "step_id": "RP5_T9_S1",
              "step_name": "Add loading indicators during auth calls",
              "description": "This step covers how to add loading indicators during auth calls.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Add loading indicators during auth calls' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Add loading indicators during auth calls",
              "final_code": "// Final implementation for: Add loading indicators during auth calls",
              "Output": []
            },
            {
              "step_id": "RP5_T9_S2",
              "step_name": "Show friendly error messages",
              "description": "This step covers how to show friendly error messages.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Show friendly error messages' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Show friendly error messages",
              "final_code": "// Final implementation for: Show friendly error messages",
              "Output": []
            },
            {
              "step_id": "RP5_T9_S3",
              "step_name": "Disable submit button while processing",
              "description": "This step covers how to disable submit button while processing.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Disable submit button while processing' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Disable submit button while processing",
              "final_code": "// Final implementation for: Disable submit button while processing",
              "Output": []
            },
            {
              "step_id": "RP5_T9_S4",
              "step_name": "Improve mobile responsiveness",
              "description": "This step covers how to improve mobile responsiveness.",
              "guidelines": [
                "Follow secure handling of passwords/tokens.",
                "Keep UI intuitive and accessible.",
                "Test redirects and route protection thoroughly."
              ],
              "why": [
                "'Improve mobile responsiveness' is essential for building a robust authentication flow."
              ],
              "starting_code": "// Start here: Improve mobile responsiveness",
              "final_code": "// Final implementation for: Improve mobile responsiveness",
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP6",
      "project_name": "Blog Application",
      "description": "Build a full-featured blog application in React with support for creating, editing, deleting, and displaying blog posts, with persistent storage and markdown support.",
      "difficulty": "Intermediate",
      "tasks": [
        {
          "task_id": "RP6_T1",
          "task_name": "Initialize React Project and Routing",
          "description": "Initialize React Project and Routing in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T1_S1",
              "step_name": "Set up project using Create React App",
              "description": "This step guides you to set up project using create react app.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Set up project using Create React App' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Set up project using Create React App",
              "final_code": "// Finalized: Set up project using Create React App",
              "Output": []
            },
            {
              "step_id": "RP6_T1_S2",
              "step_name": "Install React Router and configure routes",
              "description": "This step guides you to install react router and configure routes.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Install React Router and configure routes' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Install React Router and configure routes",
              "final_code": "// Finalized: Install React Router and configure routes",
              "Output": []
            },
            {
              "step_id": "RP6_T1_S3",
              "step_name": "Create layout with navbar and route outlets",
              "description": "This step guides you to create layout with navbar and route outlets.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Create layout with navbar and route outlets' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Create layout with navbar and route outlets",
              "final_code": "// Finalized: Create layout with navbar and route outlets",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T2",
          "task_name": "Set Up Project Structure and State Management",
          "description": "Set Up Project Structure and State Management in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T2_S1",
              "step_name": "Create folders for components, pages, utils, and services",
              "description": "This step guides you to create folders for components, pages, utils, and services.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Create folders for components, pages, utils, and services' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Create folders for components, pages, utils, and services",
              "final_code": "// Finalized: Create folders for components, pages, utils, and services",
              "Output": []
            },
            {
              "step_id": "RP6_T2_S2",
              "step_name": "Setup context or useReducer for global blog state",
              "description": "This step guides you to setup context or usereducer for global blog state.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Setup context or useReducer for global blog state' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Setup context or useReducer for global blog state",
              "final_code": "// Finalized: Setup context or useReducer for global blog state",
              "Output": []
            },
            {
              "step_id": "RP6_T2_S3",
              "step_name": "Define post structure with id, title, content, date",
              "description": "This step guides you to define post structure with id, title, content, date.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Define post structure with id, title, content, date' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Define post structure with id, title, content, date",
              "final_code": "// Finalized: Define post structure with id, title, content, date",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T3",
          "task_name": "Build Blog Post List Page",
          "description": "Build Blog Post List Page in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T3_S1",
              "step_name": "Create component to display list of posts",
              "description": "This step guides you to create component to display list of posts.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Create component to display list of posts' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Create component to display list of posts",
              "final_code": "// Finalized: Create component to display list of posts",
              "Output": []
            },
            {
              "step_id": "RP6_T3_S2",
              "step_name": "Sort posts by date descending",
              "description": "This step guides you to sort posts by date descending.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Sort posts by date descending' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Sort posts by date descending",
              "final_code": "// Finalized: Sort posts by date descending",
              "Output": []
            },
            {
              "step_id": "RP6_T3_S3",
              "step_name": "Link to full blog post page",
              "description": "This step guides you to link to full blog post page.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Link to full blog post page' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Link to full blog post page",
              "final_code": "// Finalized: Link to full blog post page",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T4",
          "task_name": "Create Blog Post Page",
          "description": "Create Blog Post Page in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T4_S1",
              "step_name": "Build route and component for reading full post",
              "description": "This step guides you to build route and component for reading full post.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Build route and component for reading full post' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Build route and component for reading full post",
              "final_code": "// Finalized: Build route and component for reading full post",
              "Output": []
            },
            {
              "step_id": "RP6_T4_S2",
              "step_name": "Extract post ID from URL using useParams",
              "description": "This step guides you to extract post id from url using useparams.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Extract post ID from URL using useParams' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Extract post ID from URL using useParams",
              "final_code": "// Finalized: Extract post ID from URL using useParams",
              "Output": []
            },
            {
              "step_id": "RP6_T4_S3",
              "step_name": "Display post title, content, and published date",
              "description": "This step guides you to display post title, content, and published date.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Display post title, content, and published date' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Display post title, content, and published date",
              "final_code": "// Finalized: Display post title, content, and published date",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T5",
          "task_name": "Add New Post Functionality",
          "description": "Add New Post Functionality in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T5_S1",
              "step_name": "Create a form with title and content fields",
              "description": "This step guides you to create a form with title and content fields.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Create a form with title and content fields' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Create a form with title and content fields",
              "final_code": "// Finalized: Create a form with title and content fields",
              "Output": []
            },
            {
              "step_id": "RP6_T5_S2",
              "step_name": "Use controlled components and useState",
              "description": "This step guides you to use controlled components and usestate.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Use controlled components and useState' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Use controlled components and useState",
              "final_code": "// Finalized: Use controlled components and useState",
              "Output": []
            },
            {
              "step_id": "RP6_T5_S3",
              "step_name": "Submit new post to context or localStorage",
              "description": "This step guides you to submit new post to context or localstorage.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Submit new post to context or localStorage' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Submit new post to context or localStorage",
              "final_code": "// Finalized: Submit new post to context or localStorage",
              "Output": []
            },
            {
              "step_id": "RP6_T5_S4",
              "step_name": "Redirect to blog list after creation",
              "description": "This step guides you to redirect to blog list after creation.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Redirect to blog list after creation' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Redirect to blog list after creation",
              "final_code": "// Finalized: Redirect to blog list after creation",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T6",
          "task_name": "Enable Post Editing and Deletion",
          "description": "Enable Post Editing and Deletion in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T6_S1",
              "step_name": "Allow user to edit existing posts in form",
              "description": "This step guides you to allow user to edit existing posts in form.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Allow user to edit existing posts in form' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Allow user to edit existing posts in form",
              "final_code": "// Finalized: Allow user to edit existing posts in form",
              "Output": []
            },
            {
              "step_id": "RP6_T6_S2",
              "step_name": "Prefill form with selected post data",
              "description": "This step guides you to prefill form with selected post data.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Prefill form with selected post data' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Prefill form with selected post data",
              "final_code": "// Finalized: Prefill form with selected post data",
              "Output": []
            },
            {
              "step_id": "RP6_T6_S3",
              "step_name": "Update post and save changes",
              "description": "This step guides you to update post and save changes.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Update post and save changes' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Update post and save changes",
              "final_code": "// Finalized: Update post and save changes",
              "Output": []
            },
            {
              "step_id": "RP6_T6_S4",
              "step_name": "Add delete button and confirmation",
              "description": "This step guides you to add delete button and confirmation.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Add delete button and confirmation' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Add delete button and confirmation",
              "final_code": "// Finalized: Add delete button and confirmation",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T7",
          "task_name": "Integrate LocalStorage for Persistence",
          "description": "Integrate LocalStorage for Persistence in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T7_S1",
              "step_name": "Save posts to localStorage on changes",
              "description": "This step guides you to save posts to localstorage on changes.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Save posts to localStorage on changes' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Save posts to localStorage on changes",
              "final_code": "// Finalized: Save posts to localStorage on changes",
              "Output": []
            },
            {
              "step_id": "RP6_T7_S2",
              "step_name": "Load posts from localStorage on app startup",
              "description": "This step guides you to load posts from localstorage on app startup.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Load posts from localStorage on app startup' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Load posts from localStorage on app startup",
              "final_code": "// Finalized: Load posts from localStorage on app startup",
              "Output": []
            },
            {
              "step_id": "RP6_T7_S3",
              "step_name": "Use useEffect to sync changes",
              "description": "This step guides you to use useeffect to sync changes.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Use useEffect to sync changes' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Use useEffect to sync changes",
              "final_code": "// Finalized: Use useEffect to sync changes",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T8",
          "task_name": "Add Markdown Support (Optional)",
          "description": "Add Markdown Support (Optional) in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T8_S1",
              "step_name": "Install a markdown library (like react-markdown)",
              "description": "This step guides you to install a markdown library (like react-markdown).",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Install a markdown library (like react-markdown)' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Install a markdown library (like react-markdown)",
              "final_code": "// Finalized: Install a markdown library (like react-markdown)",
              "Output": []
            },
            {
              "step_id": "RP6_T8_S2",
              "step_name": "Allow users to format post content in markdown",
              "description": "This step guides you to allow users to format post content in markdown.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Allow users to format post content in markdown' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Allow users to format post content in markdown",
              "final_code": "// Finalized: Allow users to format post content in markdown",
              "Output": []
            },
            {
              "step_id": "RP6_T8_S3",
              "step_name": "Render parsed markdown in blog post view",
              "description": "This step guides you to render parsed markdown in blog post view.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Render parsed markdown in blog post view' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Render parsed markdown in blog post view",
              "final_code": "// Finalized: Render parsed markdown in blog post view",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T9",
          "task_name": "Create a Reusable PostCard Component",
          "description": "Create a Reusable PostCard Component in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T9_S1",
              "step_name": "Build a PostCard for post previews",
              "description": "This step guides you to build a postcard for post previews.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Build a PostCard for post previews' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Build a PostCard for post previews",
              "final_code": "// Finalized: Build a PostCard for post previews",
              "Output": []
            },
            {
              "step_id": "RP6_T9_S2",
              "step_name": "Reuse component on homepage, lists, and search results",
              "description": "This step guides you to reuse component on homepage, lists, and search results.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Reuse component on homepage, lists, and search results' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Reuse component on homepage, lists, and search results",
              "final_code": "// Finalized: Reuse component on homepage, lists, and search results",
              "Output": []
            },
            {
              "step_id": "RP6_T9_S3",
              "step_name": "Style it with title, snippet, and date",
              "description": "This step guides you to style it with title, snippet, and date.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Style it with title, snippet, and date' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Style it with title, snippet, and date",
              "final_code": "// Finalized: Style it with title, snippet, and date",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T10",
          "task_name": "Implement Search and Filter Features",
          "description": "Implement Search and Filter Features in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T10_S1",
              "step_name": "Add input to filter posts by keyword",
              "description": "This step guides you to add input to filter posts by keyword.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Add input to filter posts by keyword' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Add input to filter posts by keyword",
              "final_code": "// Finalized: Add input to filter posts by keyword",
              "Output": []
            },
            {
              "step_id": "RP6_T10_S2",
              "step_name": "Add dropdown for date/category filtering",
              "description": "This step guides you to add dropdown for date/category filtering.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Add dropdown for date/category filtering' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Add dropdown for date/category filtering",
              "final_code": "// Finalized: Add dropdown for date/category filtering",
              "Output": []
            },
            {
              "step_id": "RP6_T10_S3",
              "step_name": "Filter posts in-memory based on input",
              "description": "This step guides you to filter posts in-memory based on input.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Filter posts in-memory based on input' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Filter posts in-memory based on input",
              "final_code": "// Finalized: Filter posts in-memory based on input",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T11",
          "task_name": "Enhance UI and UX",
          "description": "Enhance UI and UX in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T11_S1",
              "step_name": "Add transitions between pages",
              "description": "This step guides you to add transitions between pages.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Add transitions between pages' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Add transitions between pages",
              "final_code": "// Finalized: Add transitions between pages",
              "Output": []
            },
            {
              "step_id": "RP6_T11_S2",
              "step_name": "Use CSS or a UI library like Tailwind/Material UI",
              "description": "This step guides you to use css or a ui library like tailwind/material ui.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Use CSS or a UI library like Tailwind/Material UI' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Use CSS or a UI library like Tailwind/Material UI",
              "final_code": "// Finalized: Use CSS or a UI library like Tailwind/Material UI",
              "Output": []
            },
            {
              "step_id": "RP6_T11_S3",
              "step_name": "Add responsive design for mobile view",
              "description": "This step guides you to add responsive design for mobile view.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Add responsive design for mobile view' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Add responsive design for mobile view",
              "final_code": "// Finalized: Add responsive design for mobile view",
              "Output": []
            },
            {
              "step_id": "RP6_T11_S4",
              "step_name": "Show 'No posts found' if filter returns nothing",
              "description": "This step guides you to show 'no posts found' if filter returns nothing.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Show 'No posts found' if filter returns nothing' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Show 'No posts found' if filter returns nothing",
              "final_code": "// Finalized: Show 'No posts found' if filter returns nothing",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP6_T12",
          "task_name": "Deploy the App",
          "description": "Deploy the App in the Blog Application project.",
          "steps": [
            {
              "step_id": "RP6_T12_S1",
              "step_name": "Build the app using `npm run build`",
              "description": "This step guides you to build the app using `npm run build`.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Build the app using `npm run build`' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Build the app using `npm run build`",
              "final_code": "// Finalized: Build the app using `npm run build`",
              "Output": []
            },
            {
              "step_id": "RP6_T12_S2",
              "step_name": "Deploy to Netlify, Vercel, or GitHub Pages",
              "description": "This step guides you to deploy to netlify, vercel, or github pages.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Deploy to Netlify, Vercel, or GitHub Pages' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Deploy to Netlify, Vercel, or GitHub Pages",
              "final_code": "// Finalized: Deploy to Netlify, Vercel, or GitHub Pages",
              "Output": []
            },
            {
              "step_id": "RP6_T12_S3",
              "step_name": "Test app on production and debug issues",
              "description": "This step guides you to test app on production and debug issues.",
              "guidelines": [
                "Follow good coding practices and separation of concerns.",
                "Ensure accessibility and responsiveness in the UI.",
                "Validate inputs and test each feature independently."
              ],
              "why": [
                "'Test app on production and debug issues' is a necessary part of a robust blogging platform."
              ],
              "starting_code": "// Begin: Test app on production and debug issues",
              "final_code": "// Finalized: Test app on production and debug issues",
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP7",
      "project_name": "Movie Ticket Browser",
      "description": "Create a React app that searches the web for movie ticket prices, compares listings, and suggests the cheapest available options to the user.",
      "difficulty": "Intermediate",
      "tasks": [
        {
          "task_id": "RP7_T1",
          "task_name": "Set Up Project and Folder Structure",
          "description": "Set Up Project and Folder Structure in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T1_S1",
              "step_name": "Create app with Create React App",
              "description": "This step will guide you to create app with create react app.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Create app with Create React App' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Create app with Create React App",
              "final_code": "// Completed: Create app with Create React App",
              "Output": []
            },
            {
              "step_id": "RP7_T1_S2",
              "step_name": "Setup folders for components, services, and pages",
              "description": "This step will guide you to setup folders for components, services, and pages.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Setup folders for components, services, and pages' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Setup folders for components, services, and pages",
              "final_code": "// Completed: Setup folders for components, services, and pages",
              "Output": []
            },
            {
              "step_id": "RP7_T1_S3",
              "step_name": "Install Axios and React Router",
              "description": "This step will guide you to install axios and react router.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Install Axios and React Router' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Install Axios and React Router",
              "final_code": "// Completed: Install Axios and React Router",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T2",
          "task_name": "Build Movie Search Interface",
          "description": "Build Movie Search Interface in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T2_S1",
              "step_name": "Create a search bar for entering movie name or city",
              "description": "This step will guide you to create a search bar for entering movie name or city.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Create a search bar for entering movie name or city' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Create a search bar for entering movie name or city",
              "final_code": "// Completed: Create a search bar for entering movie name or city",
              "Output": []
            },
            {
              "step_id": "RP7_T2_S2",
              "step_name": "Track user input with useState",
              "description": "This step will guide you to track user input with usestate.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Track user input with useState' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Track user input with useState",
              "final_code": "// Completed: Track user input with useState",
              "Output": []
            },
            {
              "step_id": "RP7_T2_S3",
              "step_name": "Submit query to a mocked backend or public API",
              "description": "This step will guide you to submit query to a mocked backend or public api.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Submit query to a mocked backend or public API' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Submit query to a mocked backend or public API",
              "final_code": "// Completed: Submit query to a mocked backend or public API",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T3",
          "task_name": "Integrate External Movie API",
          "description": "Integrate External Movie API in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T3_S1",
              "step_name": "Select a movie/ticket API or mock one for testing",
              "description": "This step will guide you to select a movie/ticket api or mock one for testing.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Select a movie/ticket API or mock one for testing' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Select a movie/ticket API or mock one for testing",
              "final_code": "// Completed: Select a movie/ticket API or mock one for testing",
              "Output": []
            },
            {
              "step_id": "RP7_T3_S2",
              "step_name": "Fetch movies and showtimes using Axios",
              "description": "This step will guide you to fetch movies and showtimes using axios.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Fetch movies and showtimes using Axios' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Fetch movies and showtimes using Axios",
              "final_code": "// Completed: Fetch movies and showtimes using Axios",
              "Output": []
            },
            {
              "step_id": "RP7_T3_S3",
              "step_name": "Handle loading, success, and error states",
              "description": "This step will guide you to handle loading, success, and error states.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Handle loading, success, and error states' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Handle loading, success, and error states",
              "final_code": "// Completed: Handle loading, success, and error states",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T4",
          "task_name": "Display Movie Listings",
          "description": "Display Movie Listings in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T4_S1",
              "step_name": "Render results in MovieCard components",
              "description": "This step will guide you to render results in moviecard components.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Render results in MovieCard components' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Render results in MovieCard components",
              "final_code": "// Completed: Render results in MovieCard components",
              "Output": []
            },
            {
              "step_id": "RP7_T4_S2",
              "step_name": "Show title, time, price, and location info",
              "description": "This step will guide you to show title, time, price, and location info.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Show title, time, price, and location info' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Show title, time, price, and location info",
              "final_code": "// Completed: Show title, time, price, and location info",
              "Output": []
            },
            {
              "step_id": "RP7_T4_S3",
              "step_name": "Support multiple listings for the same movie",
              "description": "This step will guide you to support multiple listings for the same movie.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Support multiple listings for the same movie' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Support multiple listings for the same movie",
              "final_code": "// Completed: Support multiple listings for the same movie",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T5",
          "task_name": "Implement Price Comparison Algorithm",
          "description": "Implement Price Comparison Algorithm in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T5_S1",
              "step_name": "Compare listings and sort by ticket price",
              "description": "This step will guide you to compare listings and sort by ticket price.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Compare listings and sort by ticket price' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Compare listings and sort by ticket price",
              "final_code": "// Completed: Compare listings and sort by ticket price",
              "Output": []
            },
            {
              "step_id": "RP7_T5_S2",
              "step_name": "Highlight the cheapest option visually",
              "description": "This step will guide you to highlight the cheapest option visually.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Highlight the cheapest option visually' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Highlight the cheapest option visually",
              "final_code": "// Completed: Highlight the cheapest option visually",
              "Output": []
            },
            {
              "step_id": "RP7_T5_S3",
              "step_name": "Allow user to expand for more info",
              "description": "This step will guide you to allow user to expand for more info.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Allow user to expand for more info' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Allow user to expand for more info",
              "final_code": "// Completed: Allow user to expand for more info",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T6",
          "task_name": "Add Filters and Sorting Options",
          "description": "Add Filters and Sorting Options in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T6_S1",
              "step_name": "Enable filters for date, time range, price, and cinema",
              "description": "This step will guide you to enable filters for date, time range, price, and cinema.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Enable filters for date, time range, price, and cinema' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Enable filters for date, time range, price, and cinema",
              "final_code": "// Completed: Enable filters for date, time range, price, and cinema",
              "Output": []
            },
            {
              "step_id": "RP7_T6_S2",
              "step_name": "Allow ascending/descending price sorting",
              "description": "This step will guide you to allow ascending/descending price sorting.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Allow ascending/descending price sorting' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Allow ascending/descending price sorting",
              "final_code": "// Completed: Allow ascending/descending price sorting",
              "Output": []
            },
            {
              "step_id": "RP7_T6_S3",
              "step_name": "Re-render filtered listings dynamically",
              "description": "This step will guide you to re-render filtered listings dynamically.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Re-render filtered listings dynamically' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Re-render filtered listings dynamically",
              "final_code": "// Completed: Re-render filtered listings dynamically",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T7",
          "task_name": "Build Movie Details Page",
          "description": "Build Movie Details Page in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T7_S1",
              "step_name": "Create a separate route for each movie",
              "description": "This step will guide you to create a separate route for each movie.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Create a separate route for each movie' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Create a separate route for each movie",
              "final_code": "// Completed: Create a separate route for each movie",
              "Output": []
            },
            {
              "step_id": "RP7_T7_S2",
              "step_name": "Show extended info including poster, cast, synopsis",
              "description": "This step will guide you to show extended info including poster, cast, synopsis.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Show extended info including poster, cast, synopsis' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Show extended info including poster, cast, synopsis",
              "final_code": "// Completed: Show extended info including poster, cast, synopsis",
              "Output": []
            },
            {
              "step_id": "RP7_T7_S3",
              "step_name": "Provide back link to listings",
              "description": "This step will guide you to provide back link to listings.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Provide back link to listings' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Provide back link to listings",
              "final_code": "// Completed: Provide back link to listings",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T8",
          "task_name": "Enable User Notifications for Price Drops",
          "description": "Enable User Notifications for Price Drops in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T8_S1",
              "step_name": "Allow user to 'watch' a movie",
              "description": "This step will guide you to allow user to 'watch' a movie.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Allow user to 'watch' a movie' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Allow user to 'watch' a movie",
              "final_code": "// Completed: Allow user to 'watch' a movie",
              "Output": []
            },
            {
              "step_id": "RP7_T8_S2",
              "step_name": "Save watched movies to localStorage or context",
              "description": "This step will guide you to save watched movies to localstorage or context.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Save watched movies to localStorage or context' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Save watched movies to localStorage or context",
              "final_code": "// Completed: Save watched movies to localStorage or context",
              "Output": []
            },
            {
              "step_id": "RP7_T8_S3",
              "step_name": "Simulate or implement notification if cheaper ticket is found",
              "description": "This step will guide you to simulate or implement notification if cheaper ticket is found.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Simulate or implement notification if cheaper ticket is found' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Simulate or implement notification if cheaper ticket is found",
              "final_code": "// Completed: Simulate or implement notification if cheaper ticket is found",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T9",
          "task_name": "Style and Optimize UI",
          "description": "Style and Optimize UI in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T9_S1",
              "step_name": "Use a design system like Tailwind or Material UI",
              "description": "This step will guide you to use a design system like tailwind or material ui.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Use a design system like Tailwind or Material UI' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Use a design system like Tailwind or Material UI",
              "final_code": "// Completed: Use a design system like Tailwind or Material UI",
              "Output": []
            },
            {
              "step_id": "RP7_T9_S2",
              "step_name": "Add transitions and loading skeletons",
              "description": "This step will guide you to add transitions and loading skeletons.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Add transitions and loading skeletons' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Add transitions and loading skeletons",
              "final_code": "// Completed: Add transitions and loading skeletons",
              "Output": []
            },
            {
              "step_id": "RP7_T9_S3",
              "step_name": "Ensure full responsiveness",
              "description": "This step will guide you to ensure full responsiveness.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Ensure full responsiveness' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Ensure full responsiveness",
              "final_code": "// Completed: Ensure full responsiveness",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T10",
          "task_name": "Persist User Preferences",
          "description": "Persist User Preferences in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T10_S1",
              "step_name": "Store search history and watched items in localStorage",
              "description": "This step will guide you to store search history and watched items in localstorage.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Store search history and watched items in localStorage' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Store search history and watched items in localStorage",
              "final_code": "// Completed: Store search history and watched items in localStorage",
              "Output": []
            },
            {
              "step_id": "RP7_T10_S2",
              "step_name": "Pre-fill inputs from stored history",
              "description": "This step will guide you to pre-fill inputs from stored history.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Pre-fill inputs from stored history' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Pre-fill inputs from stored history",
              "final_code": "// Completed: Pre-fill inputs from stored history",
              "Output": []
            },
            {
              "step_id": "RP7_T10_S3",
              "step_name": "Allow clearing history from settings",
              "description": "This step will guide you to allow clearing history from settings.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Allow clearing history from settings' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Allow clearing history from settings",
              "final_code": "// Completed: Allow clearing history from settings",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T11",
          "task_name": "Add Error Handling and UX Feedback",
          "description": "Add Error Handling and UX Feedback in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T11_S1",
              "step_name": "Show custom error messages for API failures",
              "description": "This step will guide you to show custom error messages for api failures.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Show custom error messages for API failures' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Show custom error messages for API failures",
              "final_code": "// Completed: Show custom error messages for API failures",
              "Output": []
            },
            {
              "step_id": "RP7_T11_S2",
              "step_name": "Disable button on empty input",
              "description": "This step will guide you to disable button on empty input.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Disable button on empty input' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Disable button on empty input",
              "final_code": "// Completed: Disable button on empty input",
              "Output": []
            },
            {
              "step_id": "RP7_T11_S3",
              "step_name": "Add fallback UI for no results found",
              "description": "This step will guide you to add fallback ui for no results found.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Add fallback UI for no results found' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Add fallback UI for no results found",
              "final_code": "// Completed: Add fallback UI for no results found",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP7_T12",
          "task_name": "Deploy and Test on Web",
          "description": "Deploy and Test on Web in the Movie Ticket Browser project.",
          "steps": [
            {
              "step_id": "RP7_T12_S1",
              "step_name": "Test app across devices",
              "description": "This step will guide you to test app across devices.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Test app across devices' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Test app across devices",
              "final_code": "// Completed: Test app across devices",
              "Output": []
            },
            {
              "step_id": "RP7_T12_S2",
              "step_name": "Deploy on Netlify, Vercel, or GitHub Pages",
              "description": "This step will guide you to deploy on netlify, vercel, or github pages.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Deploy on Netlify, Vercel, or GitHub Pages' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Deploy on Netlify, Vercel, or GitHub Pages",
              "final_code": "// Completed: Deploy on Netlify, Vercel, or GitHub Pages",
              "Output": []
            },
            {
              "step_id": "RP7_T12_S3",
              "step_name": "Optimize bundle and fix mobile issues",
              "description": "This step will guide you to optimize bundle and fix mobile issues.",
              "guidelines": [
                "Focus on clean data flow and API integration.",
                "Optimize for user experience and fast interaction.",
                "Use reusable components where possible."
              ],
              "why": [
                "'Optimize bundle and fix mobile issues' is critical to building a reliable and usable ticket comparison app."
              ],
              "starting_code": "// Starting: Optimize bundle and fix mobile issues",
              "final_code": "// Completed: Optimize bundle and fix mobile issues",
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP8",
      "project_name": "Personal Portfolio Website",
      "description": "Create a visually-rich, animated personal portfolio using React with advanced structure, layout, animation, routing, contact forms, and deployment.",
      "difficulty": "Advanced",
      "tasks": [
        {
          "task_id": "RP8_T1",
          "task_name": "Set Up Project and File Structure",
          "description": "Set Up Project and File Structure in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T1_S1",
              "step_name": "Optimize feature or style for set up project and file structure",
              "description": "This step walks you through how to optimize feature or style for set up project and file structure.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Optimize feature or style for set up project and file structure' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Optimize feature or style for set up project and file structure",
              "final_code": "// Final: Optimize feature or style for set up project and file structure",
              "Output": []
            },
            {
              "step_id": "RP8_T1_S2",
              "step_name": "Configure feature or style for set up project and file structure",
              "description": "This step walks you through how to configure feature or style for set up project and file structure.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Configure feature or style for set up project and file structure' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Configure feature or style for set up project and file structure",
              "final_code": "// Final: Configure feature or style for set up project and file structure",
              "Output": []
            },
            {
              "step_id": "RP8_T1_S3",
              "step_name": "Add feature or style for set up project and file structure",
              "description": "This step walks you through how to add feature or style for set up project and file structure.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Add feature or style for set up project and file structure' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Add feature or style for set up project and file structure",
              "final_code": "// Final: Add feature or style for set up project and file structure",
              "Output": []
            },
            {
              "step_id": "RP8_T1_S4",
              "step_name": "Build feature or style for set up project and file structure",
              "description": "This step walks you through how to build feature or style for set up project and file structure.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for set up project and file structure' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for set up project and file structure",
              "final_code": "// Final: Build feature or style for set up project and file structure",
              "Output": []
            },
            {
              "step_id": "RP8_T1_S5",
              "step_name": "Connect feature or style for set up project and file structure",
              "description": "This step walks you through how to connect feature or style for set up project and file structure.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Connect feature or style for set up project and file structure' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Connect feature or style for set up project and file structure",
              "final_code": "// Final: Connect feature or style for set up project and file structure",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T2",
          "task_name": "Install and Configure Frameworks",
          "description": "Install and Configure Frameworks in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T2_S1",
              "step_name": "Configure feature or style for install and configure frameworks",
              "description": "This step walks you through how to configure feature or style for install and configure frameworks.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Configure feature or style for install and configure frameworks' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Configure feature or style for install and configure frameworks",
              "final_code": "// Final: Configure feature or style for install and configure frameworks",
              "Output": []
            },
            {
              "step_id": "RP8_T2_S2",
              "step_name": "Connect feature or style for install and configure frameworks",
              "description": "This step walks you through how to connect feature or style for install and configure frameworks.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Connect feature or style for install and configure frameworks' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Connect feature or style for install and configure frameworks",
              "final_code": "// Final: Connect feature or style for install and configure frameworks",
              "Output": []
            },
            {
              "step_id": "RP8_T2_S3",
              "step_name": "Configure feature or style for install and configure frameworks",
              "description": "This step walks you through how to configure feature or style for install and configure frameworks.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Configure feature or style for install and configure frameworks' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Configure feature or style for install and configure frameworks",
              "final_code": "// Final: Configure feature or style for install and configure frameworks",
              "Output": []
            },
            {
              "step_id": "RP8_T2_S4",
              "step_name": "Build feature or style for install and configure frameworks",
              "description": "This step walks you through how to build feature or style for install and configure frameworks.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for install and configure frameworks' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for install and configure frameworks",
              "final_code": "// Final: Build feature or style for install and configure frameworks",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T3",
          "task_name": "Create Navigation and Routing",
          "description": "Create Navigation and Routing in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T3_S1",
              "step_name": "Style feature or style for create navigation and routing",
              "description": "This step walks you through how to style feature or style for create navigation and routing.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for create navigation and routing' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for create navigation and routing",
              "final_code": "// Final: Style feature or style for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP8_T3_S2",
              "step_name": "Configure feature or style for create navigation and routing",
              "description": "This step walks you through how to configure feature or style for create navigation and routing.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Configure feature or style for create navigation and routing' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Configure feature or style for create navigation and routing",
              "final_code": "// Final: Configure feature or style for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP8_T3_S3",
              "step_name": "Integrate feature or style for create navigation and routing",
              "description": "This step walks you through how to integrate feature or style for create navigation and routing.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for create navigation and routing' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for create navigation and routing",
              "final_code": "// Final: Integrate feature or style for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP8_T3_S4",
              "step_name": "Build feature or style for create navigation and routing",
              "description": "This step walks you through how to build feature or style for create navigation and routing.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for create navigation and routing' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for create navigation and routing",
              "final_code": "// Final: Build feature or style for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP8_T3_S5",
              "step_name": "Refactor feature or style for create navigation and routing",
              "description": "This step walks you through how to refactor feature or style for create navigation and routing.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Refactor feature or style for create navigation and routing' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Refactor feature or style for create navigation and routing",
              "final_code": "// Final: Refactor feature or style for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP8_T3_S6",
              "step_name": "Style feature or style for create navigation and routing",
              "description": "This step walks you through how to style feature or style for create navigation and routing.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for create navigation and routing' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for create navigation and routing",
              "final_code": "// Final: Style feature or style for create navigation and routing",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T4",
          "task_name": "Build Hero Section with Animation",
          "description": "Build Hero Section with Animation in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T4_S1",
              "step_name": "Build feature or style for build hero section with animation",
              "description": "This step walks you through how to build feature or style for build hero section with animation.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for build hero section with animation' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for build hero section with animation",
              "final_code": "// Final: Build feature or style for build hero section with animation",
              "Output": []
            },
            {
              "step_id": "RP8_T4_S2",
              "step_name": "Style feature or style for build hero section with animation",
              "description": "This step walks you through how to style feature or style for build hero section with animation.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for build hero section with animation' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for build hero section with animation",
              "final_code": "// Final: Style feature or style for build hero section with animation",
              "Output": []
            },
            {
              "step_id": "RP8_T4_S3",
              "step_name": "Refactor feature or style for build hero section with animation",
              "description": "This step walks you through how to refactor feature or style for build hero section with animation.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Refactor feature or style for build hero section with animation' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Refactor feature or style for build hero section with animation",
              "final_code": "// Final: Refactor feature or style for build hero section with animation",
              "Output": []
            },
            {
              "step_id": "RP8_T4_S4",
              "step_name": "Style feature or style for build hero section with animation",
              "description": "This step walks you through how to style feature or style for build hero section with animation.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for build hero section with animation' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for build hero section with animation",
              "final_code": "// Final: Style feature or style for build hero section with animation",
              "Output": []
            },
            {
              "step_id": "RP8_T4_S5",
              "step_name": "Connect feature or style for build hero section with animation",
              "description": "This step walks you through how to connect feature or style for build hero section with animation.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Connect feature or style for build hero section with animation' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Connect feature or style for build hero section with animation",
              "final_code": "// Final: Connect feature or style for build hero section with animation",
              "Output": []
            },
            {
              "step_id": "RP8_T4_S6",
              "step_name": "Style feature or style for build hero section with animation",
              "description": "This step walks you through how to style feature or style for build hero section with animation.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for build hero section with animation' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for build hero section with animation",
              "final_code": "// Final: Style feature or style for build hero section with animation",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T5",
          "task_name": "Develop About Section and Skills Display",
          "description": "Develop About Section and Skills Display in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T5_S1",
              "step_name": "Setup feature or style for develop about section and skills display",
              "description": "This step walks you through how to setup feature or style for develop about section and skills display.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for develop about section and skills display' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for develop about section and skills display",
              "final_code": "// Final: Setup feature or style for develop about section and skills display",
              "Output": []
            },
            {
              "step_id": "RP8_T5_S2",
              "step_name": "Connect feature or style for develop about section and skills display",
              "description": "This step walks you through how to connect feature or style for develop about section and skills display.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Connect feature or style for develop about section and skills display' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Connect feature or style for develop about section and skills display",
              "final_code": "// Final: Connect feature or style for develop about section and skills display",
              "Output": []
            },
            {
              "step_id": "RP8_T5_S3",
              "step_name": "Optimize feature or style for develop about section and skills display",
              "description": "This step walks you through how to optimize feature or style for develop about section and skills display.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Optimize feature or style for develop about section and skills display' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Optimize feature or style for develop about section and skills display",
              "final_code": "// Final: Optimize feature or style for develop about section and skills display",
              "Output": []
            },
            {
              "step_id": "RP8_T5_S4",
              "step_name": "Integrate feature or style for develop about section and skills display",
              "description": "This step walks you through how to integrate feature or style for develop about section and skills display.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for develop about section and skills display' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for develop about section and skills display",
              "final_code": "// Final: Integrate feature or style for develop about section and skills display",
              "Output": []
            },
            {
              "step_id": "RP8_T5_S5",
              "step_name": "Integrate feature or style for develop about section and skills display",
              "description": "This step walks you through how to integrate feature or style for develop about section and skills display.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for develop about section and skills display' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for develop about section and skills display",
              "final_code": "// Final: Integrate feature or style for develop about section and skills display",
              "Output": []
            },
            {
              "step_id": "RP8_T5_S6",
              "step_name": "Style feature or style for develop about section and skills display",
              "description": "This step walks you through how to style feature or style for develop about section and skills display.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for develop about section and skills display' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for develop about section and skills display",
              "final_code": "// Final: Style feature or style for develop about section and skills display",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T6",
          "task_name": "Create Dynamic Project Showcase",
          "description": "Create Dynamic Project Showcase in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T6_S1",
              "step_name": "Add feature or style for create dynamic project showcase",
              "description": "This step walks you through how to add feature or style for create dynamic project showcase.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Add feature or style for create dynamic project showcase' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Add feature or style for create dynamic project showcase",
              "final_code": "// Final: Add feature or style for create dynamic project showcase",
              "Output": []
            },
            {
              "step_id": "RP8_T6_S2",
              "step_name": "Add feature or style for create dynamic project showcase",
              "description": "This step walks you through how to add feature or style for create dynamic project showcase.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Add feature or style for create dynamic project showcase' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Add feature or style for create dynamic project showcase",
              "final_code": "// Final: Add feature or style for create dynamic project showcase",
              "Output": []
            },
            {
              "step_id": "RP8_T6_S3",
              "step_name": "Refactor feature or style for create dynamic project showcase",
              "description": "This step walks you through how to refactor feature or style for create dynamic project showcase.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Refactor feature or style for create dynamic project showcase' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Refactor feature or style for create dynamic project showcase",
              "final_code": "// Final: Refactor feature or style for create dynamic project showcase",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T7",
          "task_name": "Add Timeline for Experience and Education",
          "description": "Add Timeline for Experience and Education in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T7_S1",
              "step_name": "Create feature or style for add timeline for experience and education",
              "description": "This step walks you through how to create feature or style for add timeline for experience and education.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Create feature or style for add timeline for experience and education' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Create feature or style for add timeline for experience and education",
              "final_code": "// Final: Create feature or style for add timeline for experience and education",
              "Output": []
            },
            {
              "step_id": "RP8_T7_S2",
              "step_name": "Build feature or style for add timeline for experience and education",
              "description": "This step walks you through how to build feature or style for add timeline for experience and education.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for add timeline for experience and education' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for add timeline for experience and education",
              "final_code": "// Final: Build feature or style for add timeline for experience and education",
              "Output": []
            },
            {
              "step_id": "RP8_T7_S3",
              "step_name": "Add feature or style for add timeline for experience and education",
              "description": "This step walks you through how to add feature or style for add timeline for experience and education.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Add feature or style for add timeline for experience and education' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Add feature or style for add timeline for experience and education",
              "final_code": "// Final: Add feature or style for add timeline for experience and education",
              "Output": []
            },
            {
              "step_id": "RP8_T7_S4",
              "step_name": "Style feature or style for add timeline for experience and education",
              "description": "This step walks you through how to style feature or style for add timeline for experience and education.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for add timeline for experience and education' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for add timeline for experience and education",
              "final_code": "// Final: Style feature or style for add timeline for experience and education",
              "Output": []
            },
            {
              "step_id": "RP8_T7_S5",
              "step_name": "Build feature or style for add timeline for experience and education",
              "description": "This step walks you through how to build feature or style for add timeline for experience and education.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for add timeline for experience and education' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for add timeline for experience and education",
              "final_code": "// Final: Build feature or style for add timeline for experience and education",
              "Output": []
            },
            {
              "step_id": "RP8_T7_S6",
              "step_name": "Setup feature or style for add timeline for experience and education",
              "description": "This step walks you through how to setup feature or style for add timeline for experience and education.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for add timeline for experience and education' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for add timeline for experience and education",
              "final_code": "// Final: Setup feature or style for add timeline for experience and education",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T8",
          "task_name": "Develop Blog Section (Optional)",
          "description": "Develop Blog Section (Optional) in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T8_S1",
              "step_name": "Setup feature or style for develop blog section (optional)",
              "description": "This step walks you through how to setup feature or style for develop blog section (optional).",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for develop blog section (optional)' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for develop blog section (optional)",
              "final_code": "// Final: Setup feature or style for develop blog section (optional)",
              "Output": []
            },
            {
              "step_id": "RP8_T8_S2",
              "step_name": "Setup feature or style for develop blog section (optional)",
              "description": "This step walks you through how to setup feature or style for develop blog section (optional).",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for develop blog section (optional)' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for develop blog section (optional)",
              "final_code": "// Final: Setup feature or style for develop blog section (optional)",
              "Output": []
            },
            {
              "step_id": "RP8_T8_S3",
              "step_name": "Configure feature or style for develop blog section (optional)",
              "description": "This step walks you through how to configure feature or style for develop blog section (optional).",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Configure feature or style for develop blog section (optional)' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Configure feature or style for develop blog section (optional)",
              "final_code": "// Final: Configure feature or style for develop blog section (optional)",
              "Output": []
            },
            {
              "step_id": "RP8_T8_S4",
              "step_name": "Build feature or style for develop blog section (optional)",
              "description": "This step walks you through how to build feature or style for develop blog section (optional).",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for develop blog section (optional)' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for develop blog section (optional)",
              "final_code": "// Final: Build feature or style for develop blog section (optional)",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T9",
          "task_name": "Build Contact Form and EmailJS Integration",
          "description": "Build Contact Form and EmailJS Integration in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T9_S1",
              "step_name": "Setup feature or style for build contact form and emailjs integration",
              "description": "This step walks you through how to setup feature or style for build contact form and emailjs integration.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for build contact form and emailjs integration' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for build contact form and emailjs integration",
              "final_code": "// Final: Setup feature or style for build contact form and emailjs integration",
              "Output": []
            },
            {
              "step_id": "RP8_T9_S2",
              "step_name": "Integrate feature or style for build contact form and emailjs integration",
              "description": "This step walks you through how to integrate feature or style for build contact form and emailjs integration.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for build contact form and emailjs integration' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for build contact form and emailjs integration",
              "final_code": "// Final: Integrate feature or style for build contact form and emailjs integration",
              "Output": []
            },
            {
              "step_id": "RP8_T9_S3",
              "step_name": "Integrate feature or style for build contact form and emailjs integration",
              "description": "This step walks you through how to integrate feature or style for build contact form and emailjs integration.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for build contact form and emailjs integration' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for build contact form and emailjs integration",
              "final_code": "// Final: Integrate feature or style for build contact form and emailjs integration",
              "Output": []
            },
            {
              "step_id": "RP8_T9_S4",
              "step_name": "Create feature or style for build contact form and emailjs integration",
              "description": "This step walks you through how to create feature or style for build contact form and emailjs integration.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Create feature or style for build contact form and emailjs integration' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Create feature or style for build contact form and emailjs integration",
              "final_code": "// Final: Create feature or style for build contact form and emailjs integration",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T10",
          "task_name": "Implement Global Theme and Colors",
          "description": "Implement Global Theme and Colors in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T10_S1",
              "step_name": "Optimize feature or style for implement global theme and colors",
              "description": "This step walks you through how to optimize feature or style for implement global theme and colors.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Optimize feature or style for implement global theme and colors' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Optimize feature or style for implement global theme and colors",
              "final_code": "// Final: Optimize feature or style for implement global theme and colors",
              "Output": []
            },
            {
              "step_id": "RP8_T10_S2",
              "step_name": "Style feature or style for implement global theme and colors",
              "description": "This step walks you through how to style feature or style for implement global theme and colors.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for implement global theme and colors' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for implement global theme and colors",
              "final_code": "// Final: Style feature or style for implement global theme and colors",
              "Output": []
            },
            {
              "step_id": "RP8_T10_S3",
              "step_name": "Setup feature or style for implement global theme and colors",
              "description": "This step walks you through how to setup feature or style for implement global theme and colors.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for implement global theme and colors' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for implement global theme and colors",
              "final_code": "// Final: Setup feature or style for implement global theme and colors",
              "Output": []
            },
            {
              "step_id": "RP8_T10_S4",
              "step_name": "Setup feature or style for implement global theme and colors",
              "description": "This step walks you through how to setup feature or style for implement global theme and colors.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for implement global theme and colors' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for implement global theme and colors",
              "final_code": "// Final: Setup feature or style for implement global theme and colors",
              "Output": []
            },
            {
              "step_id": "RP8_T10_S5",
              "step_name": "Integrate feature or style for implement global theme and colors",
              "description": "This step walks you through how to integrate feature or style for implement global theme and colors.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for implement global theme and colors' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for implement global theme and colors",
              "final_code": "// Final: Integrate feature or style for implement global theme and colors",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T11",
          "task_name": "Make the App Fully Responsive",
          "description": "Make the App Fully Responsive in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T11_S1",
              "step_name": "Build feature or style for make the app fully responsive",
              "description": "This step walks you through how to build feature or style for make the app fully responsive.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for make the app fully responsive' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for make the app fully responsive",
              "final_code": "// Final: Build feature or style for make the app fully responsive",
              "Output": []
            },
            {
              "step_id": "RP8_T11_S2",
              "step_name": "Style feature or style for make the app fully responsive",
              "description": "This step walks you through how to style feature or style for make the app fully responsive.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for make the app fully responsive' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for make the app fully responsive",
              "final_code": "// Final: Style feature or style for make the app fully responsive",
              "Output": []
            },
            {
              "step_id": "RP8_T11_S3",
              "step_name": "Create feature or style for make the app fully responsive",
              "description": "This step walks you through how to create feature or style for make the app fully responsive.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Create feature or style for make the app fully responsive' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Create feature or style for make the app fully responsive",
              "final_code": "// Final: Create feature or style for make the app fully responsive",
              "Output": []
            },
            {
              "step_id": "RP8_T11_S4",
              "step_name": "Configure feature or style for make the app fully responsive",
              "description": "This step walks you through how to configure feature or style for make the app fully responsive.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Configure feature or style for make the app fully responsive' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Configure feature or style for make the app fully responsive",
              "final_code": "// Final: Configure feature or style for make the app fully responsive",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T12",
          "task_name": "Add SEO and Performance Optimizations",
          "description": "Add SEO and Performance Optimizations in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T12_S1",
              "step_name": "Add feature or style for add seo and performance optimizations",
              "description": "This step walks you through how to add feature or style for add seo and performance optimizations.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Add feature or style for add seo and performance optimizations' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Add feature or style for add seo and performance optimizations",
              "final_code": "// Final: Add feature or style for add seo and performance optimizations",
              "Output": []
            },
            {
              "step_id": "RP8_T12_S2",
              "step_name": "Create feature or style for add seo and performance optimizations",
              "description": "This step walks you through how to create feature or style for add seo and performance optimizations.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Create feature or style for add seo and performance optimizations' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Create feature or style for add seo and performance optimizations",
              "final_code": "// Final: Create feature or style for add seo and performance optimizations",
              "Output": []
            },
            {
              "step_id": "RP8_T12_S3",
              "step_name": "Integrate feature or style for add seo and performance optimizations",
              "description": "This step walks you through how to integrate feature or style for add seo and performance optimizations.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for add seo and performance optimizations' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for add seo and performance optimizations",
              "final_code": "// Final: Integrate feature or style for add seo and performance optimizations",
              "Output": []
            },
            {
              "step_id": "RP8_T12_S4",
              "step_name": "Create feature or style for add seo and performance optimizations",
              "description": "This step walks you through how to create feature or style for add seo and performance optimizations.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Create feature or style for add seo and performance optimizations' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Create feature or style for add seo and performance optimizations",
              "final_code": "// Final: Create feature or style for add seo and performance optimizations",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T13",
          "task_name": "Add Downloadable Resume Feature",
          "description": "Add Downloadable Resume Feature in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T13_S1",
              "step_name": "Style feature or style for add downloadable resume feature",
              "description": "This step walks you through how to style feature or style for add downloadable resume feature.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for add downloadable resume feature' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for add downloadable resume feature",
              "final_code": "// Final: Style feature or style for add downloadable resume feature",
              "Output": []
            },
            {
              "step_id": "RP8_T13_S2",
              "step_name": "Build feature or style for add downloadable resume feature",
              "description": "This step walks you through how to build feature or style for add downloadable resume feature.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for add downloadable resume feature' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for add downloadable resume feature",
              "final_code": "// Final: Build feature or style for add downloadable resume feature",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T14",
          "task_name": "Implement Scroll-to-Top and Section Transitions",
          "description": "Implement Scroll-to-Top and Section Transitions in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T14_S1",
              "step_name": "Connect feature or style for implement scroll-to-top and section transitions",
              "description": "This step walks you through how to connect feature or style for implement scroll-to-top and section transitions.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Connect feature or style for implement scroll-to-top and section transitions' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Connect feature or style for implement scroll-to-top and section transitions",
              "final_code": "// Final: Connect feature or style for implement scroll-to-top and section transitions",
              "Output": []
            },
            {
              "step_id": "RP8_T14_S2",
              "step_name": "Connect feature or style for implement scroll-to-top and section transitions",
              "description": "This step walks you through how to connect feature or style for implement scroll-to-top and section transitions.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Connect feature or style for implement scroll-to-top and section transitions' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Connect feature or style for implement scroll-to-top and section transitions",
              "final_code": "// Final: Connect feature or style for implement scroll-to-top and section transitions",
              "Output": []
            },
            {
              "step_id": "RP8_T14_S3",
              "step_name": "Integrate feature or style for implement scroll-to-top and section transitions",
              "description": "This step walks you through how to integrate feature or style for implement scroll-to-top and section transitions.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Integrate feature or style for implement scroll-to-top and section transitions' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Integrate feature or style for implement scroll-to-top and section transitions",
              "final_code": "// Final: Integrate feature or style for implement scroll-to-top and section transitions",
              "Output": []
            },
            {
              "step_id": "RP8_T14_S4",
              "step_name": "Setup feature or style for implement scroll-to-top and section transitions",
              "description": "This step walks you through how to setup feature or style for implement scroll-to-top and section transitions.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Setup feature or style for implement scroll-to-top and section transitions' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Setup feature or style for implement scroll-to-top and section transitions",
              "final_code": "// Final: Setup feature or style for implement scroll-to-top and section transitions",
              "Output": []
            },
            {
              "step_id": "RP8_T14_S5",
              "step_name": "Refactor feature or style for implement scroll-to-top and section transitions",
              "description": "This step walks you through how to refactor feature or style for implement scroll-to-top and section transitions.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Refactor feature or style for implement scroll-to-top and section transitions' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Refactor feature or style for implement scroll-to-top and section transitions",
              "final_code": "// Final: Refactor feature or style for implement scroll-to-top and section transitions",
              "Output": []
            },
            {
              "step_id": "RP8_T14_S6",
              "step_name": "Build feature or style for implement scroll-to-top and section transitions",
              "description": "This step walks you through how to build feature or style for implement scroll-to-top and section transitions.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for implement scroll-to-top and section transitions' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for implement scroll-to-top and section transitions",
              "final_code": "// Final: Build feature or style for implement scroll-to-top and section transitions",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP8_T15",
          "task_name": "Deploy Portfolio and Connect Domain",
          "description": "Deploy Portfolio and Connect Domain in the Personal Portfolio Website project.",
          "steps": [
            {
              "step_id": "RP8_T15_S1",
              "step_name": "Connect feature or style for deploy portfolio and connect domain",
              "description": "This step walks you through how to connect feature or style for deploy portfolio and connect domain.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Connect feature or style for deploy portfolio and connect domain' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Connect feature or style for deploy portfolio and connect domain",
              "final_code": "// Final: Connect feature or style for deploy portfolio and connect domain",
              "Output": []
            },
            {
              "step_id": "RP8_T15_S2",
              "step_name": "Build feature or style for deploy portfolio and connect domain",
              "description": "This step walks you through how to build feature or style for deploy portfolio and connect domain.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Build feature or style for deploy portfolio and connect domain' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Build feature or style for deploy portfolio and connect domain",
              "final_code": "// Final: Build feature or style for deploy portfolio and connect domain",
              "Output": []
            },
            {
              "step_id": "RP8_T15_S3",
              "step_name": "Configure feature or style for deploy portfolio and connect domain",
              "description": "This step walks you through how to configure feature or style for deploy portfolio and connect domain.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Configure feature or style for deploy portfolio and connect domain' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Configure feature or style for deploy portfolio and connect domain",
              "final_code": "// Final: Configure feature or style for deploy portfolio and connect domain",
              "Output": []
            },
            {
              "step_id": "RP8_T15_S4",
              "step_name": "Style feature or style for deploy portfolio and connect domain",
              "description": "This step walks you through how to style feature or style for deploy portfolio and connect domain.",
              "guidelines": [
                "Write modular, clean components.",
                "Test responsiveness and accessibility at every stage.",
                "Use reusable styling utilities when possible."
              ],
              "why": [
                "'Style feature or style for deploy portfolio and connect domain' contributes to a polished and flexible portfolio."
              ],
              "starting_code": "// Begin: Style feature or style for deploy portfolio and connect domain",
              "final_code": "// Final: Style feature or style for deploy portfolio and connect domain",
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP9",
      "project_name": "E-Commerce Storefront",
      "description": "Develop a robust and scalable e-commerce frontend in React featuring dynamic product listing, filtering, cart, authentication, checkout, and admin dashboard.",
      "difficulty": "Expert",
      "tasks": [
        {
          "task_id": "RP9_T1",
          "task_name": "Set Up React Environment and Boilerplate",
          "description": "Set Up React Environment and Boilerplate in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T1_S1",
              "step_name": "Integrate logic for set up react environment and boilerplate",
              "description": "Guides how to integrate logic in the context of set up react environment and boilerplate.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Integrate logic for set up react environment and boilerplate",
              "final_code": "// Final: Integrate logic for set up react environment and boilerplate",
              "Output": []
            },
            {
              "step_id": "RP9_T1_S2",
              "step_name": "Connect to API for set up react environment and boilerplate",
              "description": "Guides how to connect to api in the context of set up react environment and boilerplate.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for set up react environment and boilerplate",
              "final_code": "// Final: Connect to API for set up react environment and boilerplate",
              "Output": []
            },
            {
              "step_id": "RP9_T1_S3",
              "step_name": "Handle errors for set up react environment and boilerplate",
              "description": "Guides how to handle errors in the context of set up react environment and boilerplate.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for set up react environment and boilerplate",
              "final_code": "// Final: Handle errors for set up react environment and boilerplate",
              "Output": []
            },
            {
              "step_id": "RP9_T1_S4",
              "step_name": "Add animations for set up react environment and boilerplate",
              "description": "Guides how to add animations in the context of set up react environment and boilerplate.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for set up react environment and boilerplate",
              "final_code": "// Final: Add animations for set up react environment and boilerplate",
              "Output": []
            },
            {
              "step_id": "RP9_T1_S5",
              "step_name": "Optimize performance for set up react environment and boilerplate",
              "description": "Guides how to optimize performance in the context of set up react environment and boilerplate.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Optimize performance for set up react environment and boilerplate",
              "final_code": "// Final: Optimize performance for set up react environment and boilerplate",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T2",
          "task_name": "Create Navigation and Routing",
          "description": "Create Navigation and Routing in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T2_S1",
              "step_name": "Style layout for create navigation and routing",
              "description": "Guides how to style layout in the context of create navigation and routing.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for create navigation and routing",
              "final_code": "// Final: Style layout for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP9_T2_S2",
              "step_name": "Set up component for create navigation and routing",
              "description": "Guides how to set up component in the context of create navigation and routing.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Set up component for create navigation and routing",
              "final_code": "// Final: Set up component for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP9_T2_S3",
              "step_name": "Add animations for create navigation and routing",
              "description": "Guides how to add animations in the context of create navigation and routing.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for create navigation and routing",
              "final_code": "// Final: Add animations for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP9_T2_S4",
              "step_name": "Connect to API for create navigation and routing",
              "description": "Guides how to connect to api in the context of create navigation and routing.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for create navigation and routing",
              "final_code": "// Final: Connect to API for create navigation and routing",
              "Output": []
            },
            {
              "step_id": "RP9_T2_S5",
              "step_name": "Handle errors for create navigation and routing",
              "description": "Guides how to handle errors in the context of create navigation and routing.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for create navigation and routing",
              "final_code": "// Final: Handle errors for create navigation and routing",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T3",
          "task_name": "Design Product Card and Grid",
          "description": "Design Product Card and Grid in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T3_S1",
              "step_name": "Handle errors for design product card and grid",
              "description": "Guides how to handle errors in the context of design product card and grid.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for design product card and grid",
              "final_code": "// Final: Handle errors for design product card and grid",
              "Output": []
            },
            {
              "step_id": "RP9_T3_S2",
              "step_name": "Connect to API for design product card and grid",
              "description": "Guides how to connect to api in the context of design product card and grid.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for design product card and grid",
              "final_code": "// Final: Connect to API for design product card and grid",
              "Output": []
            },
            {
              "step_id": "RP9_T3_S3",
              "step_name": "Add animations for design product card and grid",
              "description": "Guides how to add animations in the context of design product card and grid.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for design product card and grid",
              "final_code": "// Final: Add animations for design product card and grid",
              "Output": []
            },
            {
              "step_id": "RP9_T3_S4",
              "step_name": "Test behavior for design product card and grid",
              "description": "Guides how to test behavior in the context of design product card and grid.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Test behavior for design product card and grid",
              "final_code": "// Final: Test behavior for design product card and grid",
              "Output": []
            },
            {
              "step_id": "RP9_T3_S5",
              "step_name": "Style layout for design product card and grid",
              "description": "Guides how to style layout in the context of design product card and grid.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for design product card and grid",
              "final_code": "// Final: Style layout for design product card and grid",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T4",
          "task_name": "Fetch and Display Products from API",
          "description": "Fetch and Display Products from API in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T4_S1",
              "step_name": "Style layout for fetch and display products from api",
              "description": "Guides how to style layout in the context of fetch and display products from api.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for fetch and display products from api",
              "final_code": "// Final: Style layout for fetch and display products from api",
              "Output": []
            },
            {
              "step_id": "RP9_T4_S2",
              "step_name": "Integrate logic for fetch and display products from api",
              "description": "Guides how to integrate logic in the context of fetch and display products from api.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Integrate logic for fetch and display products from api",
              "final_code": "// Final: Integrate logic for fetch and display products from api",
              "Output": []
            },
            {
              "step_id": "RP9_T4_S3",
              "step_name": "Add animations for fetch and display products from api",
              "description": "Guides how to add animations in the context of fetch and display products from api.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for fetch and display products from api",
              "final_code": "// Final: Add animations for fetch and display products from api",
              "Output": []
            },
            {
              "step_id": "RP9_T4_S4",
              "step_name": "Connect to API for fetch and display products from api",
              "description": "Guides how to connect to api in the context of fetch and display products from api.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for fetch and display products from api",
              "final_code": "// Final: Connect to API for fetch and display products from api",
              "Output": []
            },
            {
              "step_id": "RP9_T4_S5",
              "step_name": "Test behavior for fetch and display products from api",
              "description": "Guides how to test behavior in the context of fetch and display products from api.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Test behavior for fetch and display products from api",
              "final_code": "// Final: Test behavior for fetch and display products from api",
              "Output": []
            },
            {
              "step_id": "RP9_T4_S6",
              "step_name": "Optimize performance for fetch and display products from api",
              "description": "Guides how to optimize performance in the context of fetch and display products from api.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Optimize performance for fetch and display products from api",
              "final_code": "// Final: Optimize performance for fetch and display products from api",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T5",
          "task_name": "Implement Filtering and Sorting",
          "description": "Implement Filtering and Sorting in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T5_S1",
              "step_name": "Add animations for implement filtering and sorting",
              "description": "Guides how to add animations in the context of implement filtering and sorting.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for implement filtering and sorting",
              "final_code": "// Final: Add animations for implement filtering and sorting",
              "Output": []
            },
            {
              "step_id": "RP9_T5_S2",
              "step_name": "Connect to API for implement filtering and sorting",
              "description": "Guides how to connect to api in the context of implement filtering and sorting.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for implement filtering and sorting",
              "final_code": "// Final: Connect to API for implement filtering and sorting",
              "Output": []
            },
            {
              "step_id": "RP9_T5_S3",
              "step_name": "Handle errors for implement filtering and sorting",
              "description": "Guides how to handle errors in the context of implement filtering and sorting.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for implement filtering and sorting",
              "final_code": "// Final: Handle errors for implement filtering and sorting",
              "Output": []
            },
            {
              "step_id": "RP9_T5_S4",
              "step_name": "Test behavior for implement filtering and sorting",
              "description": "Guides how to test behavior in the context of implement filtering and sorting.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Test behavior for implement filtering and sorting",
              "final_code": "// Final: Test behavior for implement filtering and sorting",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T6",
          "task_name": "Build Product Detail Page",
          "description": "Build Product Detail Page in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T6_S1",
              "step_name": "Test behavior for build product detail page",
              "description": "Guides how to test behavior in the context of build product detail page.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Test behavior for build product detail page",
              "final_code": "// Final: Test behavior for build product detail page",
              "Output": []
            },
            {
              "step_id": "RP9_T6_S2",
              "step_name": "Handle errors for build product detail page",
              "description": "Guides how to handle errors in the context of build product detail page.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for build product detail page",
              "final_code": "// Final: Handle errors for build product detail page",
              "Output": []
            },
            {
              "step_id": "RP9_T6_S3",
              "step_name": "Connect to API for build product detail page",
              "description": "Guides how to connect to api in the context of build product detail page.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for build product detail page",
              "final_code": "// Final: Connect to API for build product detail page",
              "Output": []
            },
            {
              "step_id": "RP9_T6_S4",
              "step_name": "Optimize performance for build product detail page",
              "description": "Guides how to optimize performance in the context of build product detail page.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Optimize performance for build product detail page",
              "final_code": "// Final: Optimize performance for build product detail page",
              "Output": []
            },
            {
              "step_id": "RP9_T6_S5",
              "step_name": "Add animations for build product detail page",
              "description": "Guides how to add animations in the context of build product detail page.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for build product detail page",
              "final_code": "// Final: Add animations for build product detail page",
              "Output": []
            },
            {
              "step_id": "RP9_T6_S6",
              "step_name": "Integrate logic for build product detail page",
              "description": "Guides how to integrate logic in the context of build product detail page.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Integrate logic for build product detail page",
              "final_code": "// Final: Integrate logic for build product detail page",
              "Output": []
            },
            {
              "step_id": "RP9_T6_S7",
              "step_name": "Style layout for build product detail page",
              "description": "Guides how to style layout in the context of build product detail page.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for build product detail page",
              "final_code": "// Final: Style layout for build product detail page",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T7",
          "task_name": "Manage Cart Functionality",
          "description": "Manage Cart Functionality in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T7_S1",
              "step_name": "Add animations for manage cart functionality",
              "description": "Guides how to add animations in the context of manage cart functionality.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for manage cart functionality",
              "final_code": "// Final: Add animations for manage cart functionality",
              "Output": []
            },
            {
              "step_id": "RP9_T7_S2",
              "step_name": "Handle errors for manage cart functionality",
              "description": "Guides how to handle errors in the context of manage cart functionality.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for manage cart functionality",
              "final_code": "// Final: Handle errors for manage cart functionality",
              "Output": []
            },
            {
              "step_id": "RP9_T7_S3",
              "step_name": "Test behavior for manage cart functionality",
              "description": "Guides how to test behavior in the context of manage cart functionality.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Test behavior for manage cart functionality",
              "final_code": "// Final: Test behavior for manage cart functionality",
              "Output": []
            },
            {
              "step_id": "RP9_T7_S4",
              "step_name": "Optimize performance for manage cart functionality",
              "description": "Guides how to optimize performance in the context of manage cart functionality.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Optimize performance for manage cart functionality",
              "final_code": "// Final: Optimize performance for manage cart functionality",
              "Output": []
            },
            {
              "step_id": "RP9_T7_S5",
              "step_name": "Set up component for manage cart functionality",
              "description": "Guides how to set up component in the context of manage cart functionality.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Set up component for manage cart functionality",
              "final_code": "// Final: Set up component for manage cart functionality",
              "Output": []
            },
            {
              "step_id": "RP9_T7_S6",
              "step_name": "Connect to API for manage cart functionality",
              "description": "Guides how to connect to api in the context of manage cart functionality.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for manage cart functionality",
              "final_code": "// Final: Connect to API for manage cart functionality",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T8",
          "task_name": "Create Checkout Process",
          "description": "Create Checkout Process in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T8_S1",
              "step_name": "Add animations for create checkout process",
              "description": "Guides how to add animations in the context of create checkout process.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for create checkout process",
              "final_code": "// Final: Add animations for create checkout process",
              "Output": []
            },
            {
              "step_id": "RP9_T8_S2",
              "step_name": "Style layout for create checkout process",
              "description": "Guides how to style layout in the context of create checkout process.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for create checkout process",
              "final_code": "// Final: Style layout for create checkout process",
              "Output": []
            },
            {
              "step_id": "RP9_T8_S3",
              "step_name": "Optimize performance for create checkout process",
              "description": "Guides how to optimize performance in the context of create checkout process.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Optimize performance for create checkout process",
              "final_code": "// Final: Optimize performance for create checkout process",
              "Output": []
            },
            {
              "step_id": "RP9_T8_S4",
              "step_name": "Set up component for create checkout process",
              "description": "Guides how to set up component in the context of create checkout process.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Set up component for create checkout process",
              "final_code": "// Final: Set up component for create checkout process",
              "Output": []
            },
            {
              "step_id": "RP9_T8_S5",
              "step_name": "Handle errors for create checkout process",
              "description": "Guides how to handle errors in the context of create checkout process.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for create checkout process",
              "final_code": "// Final: Handle errors for create checkout process",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T9",
          "task_name": "Add Authentication and Protected Routes",
          "description": "Add Authentication and Protected Routes in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T9_S1",
              "step_name": "Connect to API for add authentication and protected routes",
              "description": "Guides how to connect to api in the context of add authentication and protected routes.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for add authentication and protected routes",
              "final_code": "// Final: Connect to API for add authentication and protected routes",
              "Output": []
            },
            {
              "step_id": "RP9_T9_S2",
              "step_name": "Style layout for add authentication and protected routes",
              "description": "Guides how to style layout in the context of add authentication and protected routes.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for add authentication and protected routes",
              "final_code": "// Final: Style layout for add authentication and protected routes",
              "Output": []
            },
            {
              "step_id": "RP9_T9_S3",
              "step_name": "Handle errors for add authentication and protected routes",
              "description": "Guides how to handle errors in the context of add authentication and protected routes.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for add authentication and protected routes",
              "final_code": "// Final: Handle errors for add authentication and protected routes",
              "Output": []
            },
            {
              "step_id": "RP9_T9_S4",
              "step_name": "Add animations for add authentication and protected routes",
              "description": "Guides how to add animations in the context of add authentication and protected routes.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for add authentication and protected routes",
              "final_code": "// Final: Add animations for add authentication and protected routes",
              "Output": []
            },
            {
              "step_id": "RP9_T9_S5",
              "step_name": "Test behavior for add authentication and protected routes",
              "description": "Guides how to test behavior in the context of add authentication and protected routes.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Test behavior for add authentication and protected routes",
              "final_code": "// Final: Test behavior for add authentication and protected routes",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T10",
          "task_name": "Build Admin Dashboard (Advanced)",
          "description": "Build Admin Dashboard (Advanced) in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T10_S1",
              "step_name": "Connect to API for build admin dashboard (advanced)",
              "description": "Guides how to connect to api in the context of build admin dashboard (advanced).",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for build admin dashboard (advanced)",
              "final_code": "// Final: Connect to API for build admin dashboard (advanced)",
              "Output": []
            },
            {
              "step_id": "RP9_T10_S2",
              "step_name": "Set up component for build admin dashboard (advanced)",
              "description": "Guides how to set up component in the context of build admin dashboard (advanced).",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Set up component for build admin dashboard (advanced)",
              "final_code": "// Final: Set up component for build admin dashboard (advanced)",
              "Output": []
            },
            {
              "step_id": "RP9_T10_S3",
              "step_name": "Style layout for build admin dashboard (advanced)",
              "description": "Guides how to style layout in the context of build admin dashboard (advanced).",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for build admin dashboard (advanced)",
              "final_code": "// Final: Style layout for build admin dashboard (advanced)",
              "Output": []
            },
            {
              "step_id": "RP9_T10_S4",
              "step_name": "Test behavior for build admin dashboard (advanced)",
              "description": "Guides how to test behavior in the context of build admin dashboard (advanced).",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Test behavior for build admin dashboard (advanced)",
              "final_code": "// Final: Test behavior for build admin dashboard (advanced)",
              "Output": []
            },
            {
              "step_id": "RP9_T10_S5",
              "step_name": "Add animations for build admin dashboard (advanced)",
              "description": "Guides how to add animations in the context of build admin dashboard (advanced).",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for build admin dashboard (advanced)",
              "final_code": "// Final: Add animations for build admin dashboard (advanced)",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T11",
          "task_name": "Optimize for Mobile and Accessibility",
          "description": "Optimize for Mobile and Accessibility in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T11_S1",
              "step_name": "Connect to API for optimize for mobile and accessibility",
              "description": "Guides how to connect to api in the context of optimize for mobile and accessibility.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for optimize for mobile and accessibility",
              "final_code": "// Final: Connect to API for optimize for mobile and accessibility",
              "Output": []
            },
            {
              "step_id": "RP9_T11_S2",
              "step_name": "Set up component for optimize for mobile and accessibility",
              "description": "Guides how to set up component in the context of optimize for mobile and accessibility.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Set up component for optimize for mobile and accessibility",
              "final_code": "// Final: Set up component for optimize for mobile and accessibility",
              "Output": []
            },
            {
              "step_id": "RP9_T11_S3",
              "step_name": "Handle errors for optimize for mobile and accessibility",
              "description": "Guides how to handle errors in the context of optimize for mobile and accessibility.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for optimize for mobile and accessibility",
              "final_code": "// Final: Handle errors for optimize for mobile and accessibility",
              "Output": []
            },
            {
              "step_id": "RP9_T11_S4",
              "step_name": "Add animations for optimize for mobile and accessibility",
              "description": "Guides how to add animations in the context of optimize for mobile and accessibility.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Add animations for optimize for mobile and accessibility",
              "final_code": "// Final: Add animations for optimize for mobile and accessibility",
              "Output": []
            },
            {
              "step_id": "RP9_T11_S5",
              "step_name": "Integrate logic for optimize for mobile and accessibility",
              "description": "Guides how to integrate logic in the context of optimize for mobile and accessibility.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Integrate logic for optimize for mobile and accessibility",
              "final_code": "// Final: Integrate logic for optimize for mobile and accessibility",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP9_T12",
          "task_name": "Deploy and Connect to Backend",
          "description": "Deploy and Connect to Backend in the E-Commerce Storefront project.",
          "steps": [
            {
              "step_id": "RP9_T12_S1",
              "step_name": "Set up component for deploy and connect to backend",
              "description": "Guides how to set up component in the context of deploy and connect to backend.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Set up component for deploy and connect to backend",
              "final_code": "// Final: Set up component for deploy and connect to backend",
              "Output": []
            },
            {
              "step_id": "RP9_T12_S2",
              "step_name": "Style layout for deploy and connect to backend",
              "description": "Guides how to style layout in the context of deploy and connect to backend.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Style layout for deploy and connect to backend",
              "final_code": "// Final: Style layout for deploy and connect to backend",
              "Output": []
            },
            {
              "step_id": "RP9_T12_S3",
              "step_name": "Handle errors for deploy and connect to backend",
              "description": "Guides how to handle errors in the context of deploy and connect to backend.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Handle errors for deploy and connect to backend",
              "final_code": "// Final: Handle errors for deploy and connect to backend",
              "Output": []
            },
            {
              "step_id": "RP9_T12_S4",
              "step_name": "Connect to API for deploy and connect to backend",
              "description": "Guides how to connect to api in the context of deploy and connect to backend.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Connect to API for deploy and connect to backend",
              "final_code": "// Final: Connect to API for deploy and connect to backend",
              "Output": []
            },
            {
              "step_id": "RP9_T12_S5",
              "step_name": "Integrate logic for deploy and connect to backend",
              "description": "Guides how to integrate logic in the context of deploy and connect to backend.",
              "guidelines": [
                "Use reusable components and clean state logic.",
                "Focus on UX, performance, and mobile responsiveness.",
                "Secure user and payment-related flows."
              ],
              "why": [
                "This step enhances the robustness of your e-commerce implementation."
              ],
              "starting_code": "// Begin: Integrate logic for deploy and connect to backend",
              "final_code": "// Final: Integrate logic for deploy and connect to backend",
              "Output": []
            }
          ]
        }
      ]
    },
    {
      "project_id": "RP10",
      "project_name": "AI Integrated Application",
      "description": "Build an expert-level React application integrated with an AI model for text generation, image generation, or code assistance, using APIs like OpenAI or HuggingFace.",
      "difficulty": "Expert",
      "tasks": [
        {
          "task_id": "RP10_T1",
          "task_name": "Set Up React and API Client",
          "description": "Set Up React and API Client in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T1_S1",
              "step_name": "Secure API call for set up react and api client",
              "description": "Guide on how to secure api call during set up react and api client.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Secure API call for set up react and api client",
              "final_code": "// Final: Secure API call for set up react and api client",
              "Output": []
            },
            {
              "step_id": "RP10_T1_S2",
              "step_name": "Render user feedback for set up react and api client",
              "description": "Guide on how to render user feedback during set up react and api client.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Render user feedback for set up react and api client",
              "final_code": "// Final: Render user feedback for set up react and api client",
              "Output": []
            },
            {
              "step_id": "RP10_T1_S3",
              "step_name": "Add loading state for set up react and api client",
              "description": "Guide on how to add loading state during set up react and api client.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Add loading state for set up react and api client",
              "final_code": "// Final: Add loading state for set up react and api client",
              "Output": []
            },
            {
              "step_id": "RP10_T1_S4",
              "step_name": "Style result layout for set up react and api client",
              "description": "Guide on how to style result layout during set up react and api client.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for set up react and api client",
              "final_code": "// Final: Style result layout for set up react and api client",
              "Output": []
            },
            {
              "step_id": "RP10_T1_S5",
              "step_name": "Create secure input for set up react and api client",
              "description": "Guide on how to create secure input during set up react and api client.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for set up react and api client",
              "final_code": "// Final: Create secure input for set up react and api client",
              "Output": []
            },
            {
              "step_id": "RP10_T1_S6",
              "step_name": "Configure component for set up react and api client",
              "description": "Guide on how to configure component during set up react and api client.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Configure component for set up react and api client",
              "final_code": "// Final: Configure component for set up react and api client",
              "Output": []
            },
            {
              "step_id": "RP10_T1_S7",
              "step_name": "Format AI output for set up react and api client",
              "description": "Guide on how to format ai output during set up react and api client.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Format AI output for set up react and api client",
              "final_code": "// Final: Format AI output for set up react and api client",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T2",
          "task_name": "Configure Environment and API Key Management",
          "description": "Configure Environment and API Key Management in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T2_S1",
              "step_name": "Connect API endpoint for configure environment and api key management",
              "description": "Guide on how to connect api endpoint during configure environment and api key management.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for configure environment and api key management",
              "final_code": "// Final: Connect API endpoint for configure environment and api key management",
              "Output": []
            },
            {
              "step_id": "RP10_T2_S2",
              "step_name": "Create secure input for configure environment and api key management",
              "description": "Guide on how to create secure input during configure environment and api key management.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for configure environment and api key management",
              "final_code": "// Final: Create secure input for configure environment and api key management",
              "Output": []
            },
            {
              "step_id": "RP10_T2_S3",
              "step_name": "Handle async state for configure environment and api key management",
              "description": "Guide on how to handle async state during configure environment and api key management.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for configure environment and api key management",
              "final_code": "// Final: Handle async state for configure environment and api key management",
              "Output": []
            },
            {
              "step_id": "RP10_T2_S4",
              "step_name": "Add loading state for configure environment and api key management",
              "description": "Guide on how to add loading state during configure environment and api key management.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Add loading state for configure environment and api key management",
              "final_code": "// Final: Add loading state for configure environment and api key management",
              "Output": []
            },
            {
              "step_id": "RP10_T2_S5",
              "step_name": "Style result layout for configure environment and api key management",
              "description": "Guide on how to style result layout during configure environment and api key management.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for configure environment and api key management",
              "final_code": "// Final: Style result layout for configure environment and api key management",
              "Output": []
            },
            {
              "step_id": "RP10_T2_S6",
              "step_name": "Render user feedback for configure environment and api key management",
              "description": "Guide on how to render user feedback during configure environment and api key management.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Render user feedback for configure environment and api key management",
              "final_code": "// Final: Render user feedback for configure environment and api key management",
              "Output": []
            },
            {
              "step_id": "RP10_T2_S7",
              "step_name": "Secure API call for configure environment and api key management",
              "description": "Guide on how to secure api call during configure environment and api key management.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Secure API call for configure environment and api key management",
              "final_code": "// Final: Secure API call for configure environment and api key management",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T3",
          "task_name": "Build UI for Input and Output",
          "description": "Build UI for Input and Output in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T3_S1",
              "step_name": "Connect API endpoint for build ui for input and output",
              "description": "Guide on how to connect api endpoint during build ui for input and output.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for build ui for input and output",
              "final_code": "// Final: Connect API endpoint for build ui for input and output",
              "Output": []
            },
            {
              "step_id": "RP10_T3_S2",
              "step_name": "Format AI output for build ui for input and output",
              "description": "Guide on how to format ai output during build ui for input and output.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Format AI output for build ui for input and output",
              "final_code": "// Final: Format AI output for build ui for input and output",
              "Output": []
            },
            {
              "step_id": "RP10_T3_S3",
              "step_name": "Add loading state for build ui for input and output",
              "description": "Guide on how to add loading state during build ui for input and output.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Add loading state for build ui for input and output",
              "final_code": "// Final: Add loading state for build ui for input and output",
              "Output": []
            },
            {
              "step_id": "RP10_T3_S4",
              "step_name": "Create secure input for build ui for input and output",
              "description": "Guide on how to create secure input during build ui for input and output.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for build ui for input and output",
              "final_code": "// Final: Create secure input for build ui for input and output",
              "Output": []
            },
            {
              "step_id": "RP10_T3_S5",
              "step_name": "Style result layout for build ui for input and output",
              "description": "Guide on how to style result layout during build ui for input and output.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for build ui for input and output",
              "final_code": "// Final: Style result layout for build ui for input and output",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T4",
          "task_name": "Integrate AI API for Text Generation",
          "description": "Integrate AI API for Text Generation in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T4_S1",
              "step_name": "Secure API call for integrate ai api for text generation",
              "description": "Guide on how to secure api call during integrate ai api for text generation.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Secure API call for integrate ai api for text generation",
              "final_code": "// Final: Secure API call for integrate ai api for text generation",
              "Output": []
            },
            {
              "step_id": "RP10_T4_S2",
              "step_name": "Format AI output for integrate ai api for text generation",
              "description": "Guide on how to format ai output during integrate ai api for text generation.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Format AI output for integrate ai api for text generation",
              "final_code": "// Final: Format AI output for integrate ai api for text generation",
              "Output": []
            },
            {
              "step_id": "RP10_T4_S3",
              "step_name": "Configure component for integrate ai api for text generation",
              "description": "Guide on how to configure component during integrate ai api for text generation.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Configure component for integrate ai api for text generation",
              "final_code": "// Final: Configure component for integrate ai api for text generation",
              "Output": []
            },
            {
              "step_id": "RP10_T4_S4",
              "step_name": "Render user feedback for integrate ai api for text generation",
              "description": "Guide on how to render user feedback during integrate ai api for text generation.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Render user feedback for integrate ai api for text generation",
              "final_code": "// Final: Render user feedback for integrate ai api for text generation",
              "Output": []
            },
            {
              "step_id": "RP10_T4_S5",
              "step_name": "Add loading state for integrate ai api for text generation",
              "description": "Guide on how to add loading state during integrate ai api for text generation.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Add loading state for integrate ai api for text generation",
              "final_code": "// Final: Add loading state for integrate ai api for text generation",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T5",
          "task_name": "Add Image Generation Support (Optional)",
          "description": "Add Image Generation Support (Optional) in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T5_S1",
              "step_name": "Secure API call for add image generation support (optional)",
              "description": "Guide on how to secure api call during add image generation support (optional).",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Secure API call for add image generation support (optional)",
              "final_code": "// Final: Secure API call for add image generation support (optional)",
              "Output": []
            },
            {
              "step_id": "RP10_T5_S2",
              "step_name": "Style result layout for add image generation support (optional)",
              "description": "Guide on how to style result layout during add image generation support (optional).",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for add image generation support (optional)",
              "final_code": "// Final: Style result layout for add image generation support (optional)",
              "Output": []
            },
            {
              "step_id": "RP10_T5_S3",
              "step_name": "Create secure input for add image generation support (optional)",
              "description": "Guide on how to create secure input during add image generation support (optional).",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for add image generation support (optional)",
              "final_code": "// Final: Create secure input for add image generation support (optional)",
              "Output": []
            },
            {
              "step_id": "RP10_T5_S4",
              "step_name": "Handle async state for add image generation support (optional)",
              "description": "Guide on how to handle async state during add image generation support (optional).",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for add image generation support (optional)",
              "final_code": "// Final: Handle async state for add image generation support (optional)",
              "Output": []
            },
            {
              "step_id": "RP10_T5_S5",
              "step_name": "Connect API endpoint for add image generation support (optional)",
              "description": "Guide on how to connect api endpoint during add image generation support (optional).",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for add image generation support (optional)",
              "final_code": "// Final: Connect API endpoint for add image generation support (optional)",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T6",
          "task_name": "Handle Advanced Error Cases and Rate Limits",
          "description": "Handle Advanced Error Cases and Rate Limits in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T6_S1",
              "step_name": "Style result layout for handle advanced error cases and rate limits",
              "description": "Guide on how to style result layout during handle advanced error cases and rate limits.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for handle advanced error cases and rate limits",
              "final_code": "// Final: Style result layout for handle advanced error cases and rate limits",
              "Output": []
            },
            {
              "step_id": "RP10_T6_S2",
              "step_name": "Render user feedback for handle advanced error cases and rate limits",
              "description": "Guide on how to render user feedback during handle advanced error cases and rate limits.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Render user feedback for handle advanced error cases and rate limits",
              "final_code": "// Final: Render user feedback for handle advanced error cases and rate limits",
              "Output": []
            },
            {
              "step_id": "RP10_T6_S3",
              "step_name": "Secure API call for handle advanced error cases and rate limits",
              "description": "Guide on how to secure api call during handle advanced error cases and rate limits.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Secure API call for handle advanced error cases and rate limits",
              "final_code": "// Final: Secure API call for handle advanced error cases and rate limits",
              "Output": []
            },
            {
              "step_id": "RP10_T6_S4",
              "step_name": "Create secure input for handle advanced error cases and rate limits",
              "description": "Guide on how to create secure input during handle advanced error cases and rate limits.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for handle advanced error cases and rate limits",
              "final_code": "// Final: Create secure input for handle advanced error cases and rate limits",
              "Output": []
            },
            {
              "step_id": "RP10_T6_S5",
              "step_name": "Connect API endpoint for handle advanced error cases and rate limits",
              "description": "Guide on how to connect api endpoint during handle advanced error cases and rate limits.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for handle advanced error cases and rate limits",
              "final_code": "// Final: Connect API endpoint for handle advanced error cases and rate limits",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T7",
          "task_name": "Save User Queries and Results",
          "description": "Save User Queries and Results in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T7_S1",
              "step_name": "Add loading state for save user queries and results",
              "description": "Guide on how to add loading state during save user queries and results.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Add loading state for save user queries and results",
              "final_code": "// Final: Add loading state for save user queries and results",
              "Output": []
            },
            {
              "step_id": "RP10_T7_S2",
              "step_name": "Handle async state for save user queries and results",
              "description": "Guide on how to handle async state during save user queries and results.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for save user queries and results",
              "final_code": "// Final: Handle async state for save user queries and results",
              "Output": []
            },
            {
              "step_id": "RP10_T7_S3",
              "step_name": "Configure component for save user queries and results",
              "description": "Guide on how to configure component during save user queries and results.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Configure component for save user queries and results",
              "final_code": "// Final: Configure component for save user queries and results",
              "Output": []
            },
            {
              "step_id": "RP10_T7_S4",
              "step_name": "Secure API call for save user queries and results",
              "description": "Guide on how to secure api call during save user queries and results.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Secure API call for save user queries and results",
              "final_code": "// Final: Secure API call for save user queries and results",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T8",
          "task_name": "Add Customizable Model Settings",
          "description": "Add Customizable Model Settings in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T8_S1",
              "step_name": "Connect API endpoint for add customizable model settings",
              "description": "Guide on how to connect api endpoint during add customizable model settings.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for add customizable model settings",
              "final_code": "// Final: Connect API endpoint for add customizable model settings",
              "Output": []
            },
            {
              "step_id": "RP10_T8_S2",
              "step_name": "Format AI output for add customizable model settings",
              "description": "Guide on how to format ai output during add customizable model settings.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Format AI output for add customizable model settings",
              "final_code": "// Final: Format AI output for add customizable model settings",
              "Output": []
            },
            {
              "step_id": "RP10_T8_S3",
              "step_name": "Handle async state for add customizable model settings",
              "description": "Guide on how to handle async state during add customizable model settings.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for add customizable model settings",
              "final_code": "// Final: Handle async state for add customizable model settings",
              "Output": []
            },
            {
              "step_id": "RP10_T8_S4",
              "step_name": "Render user feedback for add customizable model settings",
              "description": "Guide on how to render user feedback during add customizable model settings.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Render user feedback for add customizable model settings",
              "final_code": "// Final: Render user feedback for add customizable model settings",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T9",
          "task_name": "Build Chat-like Interface for Multi-turn Dialogue",
          "description": "Build Chat-like Interface for Multi-turn Dialogue in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T9_S1",
              "step_name": "Connect API endpoint for build chat-like interface for multi-turn dialogue",
              "description": "Guide on how to connect api endpoint during build chat-like interface for multi-turn dialogue.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for build chat-like interface for multi-turn dialogue",
              "final_code": "// Final: Connect API endpoint for build chat-like interface for multi-turn dialogue",
              "Output": []
            },
            {
              "step_id": "RP10_T9_S2",
              "step_name": "Format AI output for build chat-like interface for multi-turn dialogue",
              "description": "Guide on how to format ai output during build chat-like interface for multi-turn dialogue.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Format AI output for build chat-like interface for multi-turn dialogue",
              "final_code": "// Final: Format AI output for build chat-like interface for multi-turn dialogue",
              "Output": []
            },
            {
              "step_id": "RP10_T9_S3",
              "step_name": "Configure component for build chat-like interface for multi-turn dialogue",
              "description": "Guide on how to configure component during build chat-like interface for multi-turn dialogue.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Configure component for build chat-like interface for multi-turn dialogue",
              "final_code": "// Final: Configure component for build chat-like interface for multi-turn dialogue",
              "Output": []
            },
            {
              "step_id": "RP10_T9_S4",
              "step_name": "Add loading state for build chat-like interface for multi-turn dialogue",
              "description": "Guide on how to add loading state during build chat-like interface for multi-turn dialogue.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Add loading state for build chat-like interface for multi-turn dialogue",
              "final_code": "// Final: Add loading state for build chat-like interface for multi-turn dialogue",
              "Output": []
            },
            {
              "step_id": "RP10_T9_S5",
              "step_name": "Handle async state for build chat-like interface for multi-turn dialogue",
              "description": "Guide on how to handle async state during build chat-like interface for multi-turn dialogue.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for build chat-like interface for multi-turn dialogue",
              "final_code": "// Final: Handle async state for build chat-like interface for multi-turn dialogue",
              "Output": []
            },
            {
              "step_id": "RP10_T9_S6",
              "step_name": "Style result layout for build chat-like interface for multi-turn dialogue",
              "description": "Guide on how to style result layout during build chat-like interface for multi-turn dialogue.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for build chat-like interface for multi-turn dialogue",
              "final_code": "// Final: Style result layout for build chat-like interface for multi-turn dialogue",
              "Output": []
            },
            {
              "step_id": "RP10_T9_S7",
              "step_name": "Create secure input for build chat-like interface for multi-turn dialogue",
              "description": "Guide on how to create secure input during build chat-like interface for multi-turn dialogue.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for build chat-like interface for multi-turn dialogue",
              "final_code": "// Final: Create secure input for build chat-like interface for multi-turn dialogue",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T10",
          "task_name": "Improve UX and Responsive Design",
          "description": "Improve UX and Responsive Design in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T10_S1",
              "step_name": "Configure component for improve ux and responsive design",
              "description": "Guide on how to configure component during improve ux and responsive design.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Configure component for improve ux and responsive design",
              "final_code": "// Final: Configure component for improve ux and responsive design",
              "Output": []
            },
            {
              "step_id": "RP10_T10_S2",
              "step_name": "Create secure input for improve ux and responsive design",
              "description": "Guide on how to create secure input during improve ux and responsive design.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for improve ux and responsive design",
              "final_code": "// Final: Create secure input for improve ux and responsive design",
              "Output": []
            },
            {
              "step_id": "RP10_T10_S3",
              "step_name": "Handle async state for improve ux and responsive design",
              "description": "Guide on how to handle async state during improve ux and responsive design.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for improve ux and responsive design",
              "final_code": "// Final: Handle async state for improve ux and responsive design",
              "Output": []
            },
            {
              "step_id": "RP10_T10_S4",
              "step_name": "Render user feedback for improve ux and responsive design",
              "description": "Guide on how to render user feedback during improve ux and responsive design.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Render user feedback for improve ux and responsive design",
              "final_code": "// Final: Render user feedback for improve ux and responsive design",
              "Output": []
            },
            {
              "step_id": "RP10_T10_S5",
              "step_name": "Style result layout for improve ux and responsive design",
              "description": "Guide on how to style result layout during improve ux and responsive design.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for improve ux and responsive design",
              "final_code": "// Final: Style result layout for improve ux and responsive design",
              "Output": []
            },
            {
              "step_id": "RP10_T10_S6",
              "step_name": "Connect API endpoint for improve ux and responsive design",
              "description": "Guide on how to connect api endpoint during improve ux and responsive design.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for improve ux and responsive design",
              "final_code": "// Final: Connect API endpoint for improve ux and responsive design",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T11",
          "task_name": "Optimize and Secure Requests",
          "description": "Optimize and Secure Requests in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T11_S1",
              "step_name": "Configure component for optimize and secure requests",
              "description": "Guide on how to configure component during optimize and secure requests.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Configure component for optimize and secure requests",
              "final_code": "// Final: Configure component for optimize and secure requests",
              "Output": []
            },
            {
              "step_id": "RP10_T11_S2",
              "step_name": "Handle async state for optimize and secure requests",
              "description": "Guide on how to handle async state during optimize and secure requests.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for optimize and secure requests",
              "final_code": "// Final: Handle async state for optimize and secure requests",
              "Output": []
            },
            {
              "step_id": "RP10_T11_S3",
              "step_name": "Secure API call for optimize and secure requests",
              "description": "Guide on how to secure api call during optimize and secure requests.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Secure API call for optimize and secure requests",
              "final_code": "// Final: Secure API call for optimize and secure requests",
              "Output": []
            },
            {
              "step_id": "RP10_T11_S4",
              "step_name": "Style result layout for optimize and secure requests",
              "description": "Guide on how to style result layout during optimize and secure requests.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Style result layout for optimize and secure requests",
              "final_code": "// Final: Style result layout for optimize and secure requests",
              "Output": []
            },
            {
              "step_id": "RP10_T11_S5",
              "step_name": "Format AI output for optimize and secure requests",
              "description": "Guide on how to format ai output during optimize and secure requests.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Format AI output for optimize and secure requests",
              "final_code": "// Final: Format AI output for optimize and secure requests",
              "Output": []
            },
            {
              "step_id": "RP10_T11_S6",
              "step_name": "Add loading state for optimize and secure requests",
              "description": "Guide on how to add loading state during optimize and secure requests.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Add loading state for optimize and secure requests",
              "final_code": "// Final: Add loading state for optimize and secure requests",
              "Output": []
            },
            {
              "step_id": "RP10_T11_S7",
              "step_name": "Create secure input for optimize and secure requests",
              "description": "Guide on how to create secure input during optimize and secure requests.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for optimize and secure requests",
              "final_code": "// Final: Create secure input for optimize and secure requests",
              "Output": []
            }
          ]
        },
        {
          "task_id": "RP10_T12",
          "task_name": "Deploy and Monitor the App",
          "description": "Deploy and Monitor the App in the AI Integrated Application project.",
          "steps": [
            {
              "step_id": "RP10_T12_S1",
              "step_name": "Connect API endpoint for deploy and monitor the app",
              "description": "Guide on how to connect api endpoint during deploy and monitor the app.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Connect API endpoint for deploy and monitor the app",
              "final_code": "// Final: Connect API endpoint for deploy and monitor the app",
              "Output": []
            },
            {
              "step_id": "RP10_T12_S2",
              "step_name": "Format AI output for deploy and monitor the app",
              "description": "Guide on how to format ai output during deploy and monitor the app.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Format AI output for deploy and monitor the app",
              "final_code": "// Final: Format AI output for deploy and monitor the app",
              "Output": []
            },
            {
              "step_id": "RP10_T12_S3",
              "step_name": "Render user feedback for deploy and monitor the app",
              "description": "Guide on how to render user feedback during deploy and monitor the app.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Render user feedback for deploy and monitor the app",
              "final_code": "// Final: Render user feedback for deploy and monitor the app",
              "Output": []
            },
            {
              "step_id": "RP10_T12_S4",
              "step_name": "Create secure input for deploy and monitor the app",
              "description": "Guide on how to create secure input during deploy and monitor the app.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Create secure input for deploy and monitor the app",
              "final_code": "// Final: Create secure input for deploy and monitor the app",
              "Output": []
            },
            {
              "step_id": "RP10_T12_S5",
              "step_name": "Handle async state for deploy and monitor the app",
              "description": "Guide on how to handle async state during deploy and monitor the app.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Handle async state for deploy and monitor the app",
              "final_code": "// Final: Handle async state for deploy and monitor the app",
              "Output": []
            },
            {
              "step_id": "RP10_T12_S6",
              "step_name": "Configure component for deploy and monitor the app",
              "description": "Guide on how to configure component during deploy and monitor the app.",
              "guidelines": [
                "Use best practices for API integration and UI responsiveness.",
                "Keep model interactions secure and efficient.",
                "Test inputs with various edge cases."
              ],
              "why": [
                "This step strengthens the AI feature and user experience."
              ],
              "starting_code": "// Begin: Configure component for deploy and monitor the app",
              "final_code": "// Final: Configure component for deploy and monitor the app",
              "Output": []
            }
          ]
        }
      ]
    }
  ]
}