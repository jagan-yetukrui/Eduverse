{
    "projects": [
        {
            "project_id": "JP1",
            "project_name": "Basic Calculator",
            "description": "A command-line calculator that performs basic arithmetic operations using Java. Great for learning methods, input handling, and loops.",
            "difficulty": "Beginner",
            "tasks": [
              {
                "task_id": "JP1_T1",
                "task_name": "Setup Your Project Environment",
                "description": "Setup Your Project Environment in the Basic Calculator project.",
                "steps": [
                  {
                    "step_id": "JP1_T1_S1",
                    "step_name": "Create Your Java File",
                    "description": "Set up your project file to begin coding your calculator.",
                    "guidelines": [
                      "Open an IDE or editor like IntelliJ or VS Code.",
                      "Create a new file and name it Calculator.java.",
                      "Include a main method inside the class."
                    ],
                    "why": [
                      "This is your main program file that will contain the calculator logic."
                    ],
                    "starting_code": "public class Calculator {\n    public static void main(String[] args) {\n        // Your code goes here\n    }\n}",
                    "final_code": "public class Calculator {\n    public static void main(String[] args) {\n        System.out.println(\"Welcome to the Java Calculator!\");\n    }\n}"
                  }
                ]
              },
              {
                "task_id": "JP1_T2",
                "task_name": "Create Operation Methods",
                "description": "Create Operation Methods in the Basic Calculator project.",
                "steps": [
                  {
                    "step_id": "JP1_T2_S1",
                    "step_name": "Add Method for Addition",
                    "description": "Create a reusable method for adding two numbers.",
                    "guidelines": [
                      "Use 'public static' to define a method called add.",
                      "Pass two parameters and return their sum."
                    ],
                    "why": [
                      "Creating functions helps modularize your code."
                    ],
                    "starting_code": "public static int add(int a, int b) {\n    // TODO: Add logic\n    return 0;\n}",
                    "final_code": "public static int add(int a, int b) {\n    return a + b;\n}"
                  },
                  {
                    "step_id": "JP1_T2_S2",
                    "step_name": "Add Methods for Subtract, Multiply, Divide",
                    "description": "Add the other operations: subtraction, multiplication, and division.",
                    "guidelines": [
                      "Use the same structure as the add method.",
                      "Ensure division method handles division by zero."
                    ],
                    "why": [
                      "Each operation should have separate logic to keep code clean."
                    ],
                    "starting_code": "public static int subtract(int a, int b) { return 0; }\npublic static int multiply(int a, int b) { return 0; }\npublic static double divide(int a, int b) { return 0; }",
                    "final_code": "public static int subtract(int a, int b) { return a - b; }\npublic static int multiply(int a, int b) { return a * b; }\npublic static double divide(int a, int b) {\n    if (b == 0) {\n        System.out.println(\"Cannot divide by zero\");\n        return 0;\n    }\n    return (double) a / b;\n}"
                  }
                ]
              },
              {
                "task_id": "JP1_T3",
                "task_name": "Take Input from User",
                "description": "Take Input from User in the Basic Calculator project.",
                "steps": [
                  {
                    "step_id": "JP1_T3_S1",
                    "step_name": "Use Scanner to Read Input",
                    "description": "Get two numbers and an operation from the user.",
                    "guidelines": [
                      "Import java.util.Scanner.",
                      "Use Scanner to read numbers and operation from console."
                    ],
                    "why": [
                      "Takes real-time input from user making it interactive."
                    ],
                    "starting_code": "Scanner sc = new Scanner(System.in);\nSystem.out.print(\"Enter first number: \");",
                    "final_code": "Scanner sc = new Scanner(System.in);\nSystem.out.print(\"Enter first number: \");\nint num1 = sc.nextInt();\nSystem.out.print(\"Enter second number: \");\nint num2 = sc.nextInt();\nSystem.out.print(\"Choose operation (+, -, *, /): \");\nchar op = sc.next().charAt(0);"
                  }
                ]
              },
              {
                "task_id": "JP1_T4",
                "task_name": "Perform Operation Based on Input",
                "description": "Perform Operation Based on Input in the Basic Calculator project.",
                "steps": [
                  {
                    "step_id": "JP1_T4_S1",
                    "step_name": "Match Input with Operation",
                    "description": "Use if/else to select the operation based on user input.",
                    "guidelines": [
                      "Compare input char with +, -, *, / using if-else.",
                      "Call the corresponding method and display result."
                    ],
                    "why": [
                      "Adds conditional logic to execute proper operation."
                    ],
                    "starting_code": "if (op == '+') {\n    // Call method\n}",
                    "final_code": "if (op == '+') {\n    System.out.println(\"Result: \" + add(num1, num2));\n} else if (op == '-') {\n    System.out.println(\"Result: \" + subtract(num1, num2));\n} else if (op == '*') {\n    System.out.println(\"Result: \" + multiply(num1, num2));\n} else if (op == '/') {\n    System.out.println(\"Result: \" + divide(num1, num2));\n} else {\n    System.out.println(\"Invalid operation.\");\n}"
                  }
                ]
              },
              {
                "task_id": "JP1_T5",
                "task_name": "Loop Until User Exits",
                "description": "Loop Until User Exits in the Basic Calculator project.",
                "steps": [
                  {
                    "step_id": "JP1_T5_S1",
                    "step_name": "Add While Loop and Exit Option",
                    "description": "Wrap logic in a loop to keep calculator running until user quits.",
                    "guidelines": [
                      "Use while(true) and ask user at end if they want to continue.",
                      "Use break to exit if user enters 'no'."
                    ],
                    "why": [
                      "Improves usability by supporting multiple operations in one run."
                    ],
                    "starting_code": "while (true) {\n    // Add logic\n}",
                    "final_code": "Scanner sc = new Scanner(System.in);\nwhile (true) {\n    System.out.print(\"Enter first number: \");\n    int num1 = sc.nextInt();\n    System.out.print(\"Enter second number: \");\n    int num2 = sc.nextInt();\n    System.out.print(\"Choose operation (+, -, *, /): \");\n    char op = sc.next().charAt(0);\n\n    if (op == '+') System.out.println(\"Result: \" + add(num1, num2));\n    else if (op == '-') System.out.println(\"Result: \" + subtract(num1, num2));\n    else if (op == '*') System.out.println(\"Result: \" + multiply(num1, num2));\n    else if (op == '/') System.out.println(\"Result: \" + divide(num1, num2));\n    else System.out.println(\"Invalid operation.\");\n\n    System.out.print(\"Do you want to continue? (yes/no): \");\n    String choice = sc.next();\n    if (choice.equalsIgnoreCase(\"no\")) break;\n}"

                        }
                    ]
                }
            ]
        },
        {
            "project_id": "JP2",
            "project_name": "Student Management System",
            "description": "Build a console-based system to manage student records using Java. Learn OOP, collections, and input handling.",
            "difficulty": "Intermediate",
            "tasks": [
              {
                "task_id": "JP2_T1",
                "task_name": "Setup Project Structure",
                "description": "Setup Project Structure in the Student Management System project.",
                "steps": [
                  {
                    "step_id": "JP2_T1_S1",
                    "step_name": "Create Main Java Class",
                    "description": "Create the entry point of the application with a main method.",
                    "guidelines": [
                      "Open your IDE and create a file named StudentManagementSystem.java.",
                      "Add a class and the main method inside it."
                    ],
                    "why": [
                      "You need a main method to run any Java application."
                    ],
                    "starting_code": "public class StudentManagementSystem {\n    public static void main(String[] args) {\n        // Start here\n    }\n}",
                    "final_code": "public class StudentManagementSystem {\n    public static void main(String[] args) {\n        System.out.println(\"Welcome to the Student Management System!\");\n    }\n}"
                  },
                  {
                    "step_id": "JP2_T1_S2",
                    "step_name": "Import Required Packages",
                    "description": "Add import statements for collections and scanner.",
                    "guidelines": [
                      "You\u2019ll use Scanner for input and ArrayList to store students.",
                      "Add imports at the top of your main class."
                    ],
                    "why": [
                      "These packages provide necessary utilities for I/O and data management."
                    ],
                    "starting_code": "// import java.util.*;",
                    "final_code": "import java.util.Scanner;\nimport java.util.ArrayList;"
                  }
                ]
              },
              {
                "task_id": "JP2_T2",
                "task_name": "Create the Student Class",
                "description": "Create the Student Class in the Student Management System project.",
                "steps": [
                  {
                    "step_id": "JP2_T2_S1",
                    "step_name": "Define Fields",
                    "description": "Create fields for student ID, name, email, and grade.",
                    "guidelines": [
                      "Use appropriate data types.",
                      "Make fields public for simplicity (or private with getters/setters)."
                    ],
                    "why": [
                      "Encapsulates student information in a single object."
                    ],
                    "starting_code": "public class Student {\n    int id;\n    String name;\n    // more fields\n}",
                    "final_code": "public class Student {\n    int id;\n    String name;\n    String email;\n    double grade;\n}"
                  },
                  {
                    "step_id": "JP2_T2_S2",
                    "step_name": "Add Constructor and toString Method",
                    "description": "Initialize all attributes and return student info as a string.",
                    "guidelines": [
                      "Create a constructor with all fields as parameters.",
                      "Override the toString() method for readable output."
                    ],
                    "why": [
                      "Constructors help easily create objects and toString improves output readability."
                    ],
                    "starting_code": "// public Student(...) { }",
                    "final_code": "public Student(int id, String name, String email, double grade) {\n    this.id = id;\n    this.name = name;\n    this.email = email;\n    this.grade = grade;\n}\n\npublic String toString() {\n    return \"ID: \" + id + \", Name: \" + name + \", Email: \" + email + \", Grade: \" + grade;\n}"
                  }
                ]
              },
              {
                "task_id": "JP2_T3",
                "task_name": "Store and Manage Data",
                "description": "Store and Manage Data in the Student Management System project.",
                "steps": [
                  {
                    "step_id": "JP2_T3_S1",
                    "step_name": "Initialize Student List",
                    "description": "Create an ArrayList to hold student objects.",
                    "guidelines": [
                      "Use static ArrayList<Student> if methods are static.",
                      "Initialize it at class level."
                    ],
                    "why": [
                      "Provides dynamic storage of student data."
                    ],
                    "starting_code": "// static ArrayList<Student> students;",
                    "final_code": "static ArrayList<Student> students = new ArrayList<>();"
                  },
                  {
                    "step_id": "JP2_T3_S2",
                    "step_name": "Test Data Addition",
                    "description": "Manually add a few students to test setup.",
                    "guidelines": [
                      "Create new Student objects and add them to the list.",
                      "Print list contents to verify."
                    ],
                    "why": [
                      "Verifies your Student class and list setup are correct."
                    ],
                    "starting_code": "// students.add(new Student(...));",
                    "final_code": "students.add(new Student(1, \"Alice\", \"alice@email.com\", 92.5));\nstudents.add(new Student(2, \"Bob\", \"bob@email.com\", 85.0));"
                  }
                ]
              },
              {
                "task_id": "JP2_T4",
                "task_name": "Add Student Functionality",
                "description": "Add Student Functionality in the Student Management System project.",
                "steps": [
                  {
                    "step_id": "JP2_T4_S1",
                    "step_name": "Collect Input for New Student",
                    "description": "Ask user to enter student details using Scanner.",
                    "guidelines": [
                      "Use nextInt, nextLine, and nextDouble methods of Scanner.",
                      "Be careful with newlines after int inputs."
                    ],
                    "why": [
                      "You need dynamic input to make the system useful."
                    ],
                    "starting_code": "// Prompt user for input using Scanner",
                    "final_code": "System.out.print(\"Enter ID: \");\nint id = sc.nextInt();\nsc.nextLine();\nSystem.out.print(\"Enter Name: \");\nString name = sc.nextLine();"
                  },
                  {
                    "step_id": "JP2_T4_S2",
                    "step_name": "Create Object and Add to List",
                    "description": "Use input to create a new Student and add to the list.",
                    "guidelines": [
                      "Pass inputs to the constructor and call add()."
                    ],
                    "why": [
                      "Adds actual student data to your system."
                    ],
                    "starting_code": "// students.add(new Student(...));",
                    "final_code": "students.add(new Student(id, name, email, grade));"
                  }
                ]
              },
              {
                "task_id": "JP2_T5",
                "task_name": "View Student Records",
                "description": "View Student Records in the Student Management System project.",
                "steps": [
                  {
                    "step_id": "JP2_T5_S1",
                    "step_name": "Check for Empty List",
                    "description": "Handle case when there are no students in the list.",
                    "guidelines": [
                      "Use students.isEmpty() before iterating."
                    ],
                    "why": [
                      "Improves UX by avoiding empty output loops."
                    ],
                    "starting_code": "// if (students.isEmpty())",
                    "final_code": "if (students.isEmpty()) {\n    System.out.println(\"No student records available.\");\n    return;\n}"
                  },
                  {
                    "step_id": "JP2_T5_S2",
                    "step_name": "Print All Student Info",
                    "description": "Loop through the list and print each student.",
                    "guidelines": [
                      "Use enhanced for-loop to iterate."
                    ],
                    "why": [
                      "Displays student information to the user."
                    ],
                    "starting_code": "// for (Student s : students) { }",
                    "final_code": "for (Student s : students) {\n    System.out.println(s);\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "JP3",
            "project_name": "Tic-Tac-Toe",
            "description": "Create a 2-player console-based Tic-Tac-Toe game in Java to practice arrays, game logic, input validation, and control structures.",
            "difficulty": "Intermediate",
            "tasks": [
              {
                "task_id": "JP3_T1",
                "task_name": "Set Up the Game Board",
                "description": "Set Up the Game Board in the Tic-Tac-Toe project.",
                "steps": [
                  {
                    "step_id": "JP3_T1_S1",
                    "step_name": "Initialize the 3x3 Board",
                    "description": "Create a 2D char array and fill it with dashes.",
                    "guidelines": [
                      "Use a 3x3 char array to represent the board.",
                      "Initialize all positions to '-'."
                    ],
                    "why": [
                      "This is the core data structure for the game."
                    ],
                    "starting_code": "char[][] board = new char[3][3];",
                    "final_code": "char[][] board = new char[3][3];\nfor (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n        board[i][j] = '-';\n    }\n}"
                  },
                  {
                    "step_id": "JP3_T1_S2",
                    "step_name": "Create a Function to Print the Board",
                    "description": "Write a method that prints the board in a readable format.",
                    "guidelines": [
                      "Use nested loops to print the board state.",
                      "Include spaces or bars to separate cells."
                    ],
                    "why": [
                      "Allows players to see the board after every move."
                    ],
                    "starting_code": "public static void printBoard(char[][] board) {\n    // Print loop\n}",
                    "final_code": "public static void printBoard(char[][] board) {\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            System.out.print(board[i][j] + \" \");\n        }\n        System.out.println();\n    }\n}"
                  }
                ]
              },
              {
                "task_id": "JP3_T2",
                "task_name": "Player Move System",
                "description": "Player Move System in the Tic-Tac-Toe project.",
                "steps": [
                  {
                    "step_id": "JP3_T2_S1",
                    "step_name": "Ask for Player Move",
                    "description": "Use Scanner to prompt the current player for row and column input.",
                    "guidelines": [
                      "Prompt user for row and column (0\u20132).",
                      "Read input using Scanner."
                    ],
                    "why": [
                      "Takes move input from players."
                    ],
                    "starting_code": "Scanner sc = new Scanner(System.in);\nSystem.out.print(\"Enter row and column: \");",
                    "final_code": "System.out.print(\"Enter row (0-2): \");\nint row = sc.nextInt();\nSystem.out.print(\"Enter column (0-2): \");\nint col = sc.nextInt();"
                  },
                  {
                    "step_id": "JP3_T2_S2",
                    "step_name": "Validate Input",
                    "description": "Ensure the selected cell is empty. If not, ask again.",
                    "guidelines": [
                      "Check if board[row][col] == '-'.",
                      "Loop until valid input is received."
                    ],
                    "why": [
                      "Prevents overwriting already played cells."
                    ],
                    "starting_code": "if (board[row][col] != '-') {\n    System.out.println(\"Cell taken.\");\n}",
                    "final_code": "while (board[row][col] != '-') {\n    System.out.println(\"Cell already taken! Try again.\");\n    row = sc.nextInt();\n    col = sc.nextInt();\n}"
                  }
                ]
              },
              {
                "task_id": "JP3_T3",
                "task_name": "Add Game Mechanics",
                "description": "Add Game Mechanics in the Tic-Tac-Toe project.",
                "steps": [
                  {
                    "step_id": "JP3_T3_S1",
                    "step_name": "Switch Player Turns",
                    "description": "Alternate between player 'X' and player 'O'.",
                    "guidelines": [
                      "Use a variable `currentPlayer`.",
                      "Flip between 'X' and 'O' after every turn."
                    ],
                    "why": [
                      "Implements turn-based logic."
                    ],
                    "starting_code": "char currentPlayer = 'X';",
                    "final_code": "currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';"
                  },
                  {
                    "step_id": "JP3_T3_S2",
                    "step_name": "Track Total Moves and Detect Draw",
                    "description": "End the game in a draw if total moves reach 9.",
                    "guidelines": [
                      "Initialize a move counter and increment each valid turn.",
                      "After 9 moves, if no win, it's a draw."
                    ],
                    "why": [
                      "Ensures game terminates in case of a draw."
                    ],
                    "starting_code": "int moves = 0;",
                    "final_code": "moves++;\nif (moves == 9) {\n    System.out.println(\"It's a draw!\");\n    break;\n}"
                  }
                ]
              },
              {
                "task_id": "JP3_T4",
                "task_name": "Check for Win Conditions",
                "description": "Check for Win Conditions in the Tic-Tac-Toe project.",
                "steps": [
                  {
                    "step_id": "JP3_T4_S1",
                    "step_name": "Write `checkWin()` Method",
                    "description": "Check if the current player has won by completing a row, column, or diagonal.",
                    "guidelines": [
                      "Loop through rows and columns to check equality.",
                      "Check both diagonals explicitly."
                    ],
                    "why": [
                      "This decides the winner of the game."
                    ],
                    "starting_code": "public static boolean checkWin(char[][] board, char player) {\n    // Logic here\n    return false;\n}",
                    "final_code": "public static boolean checkWin(char[][] board, char player) {\n    for (int i = 0; i < 3; i++) {\n        if (board[i][0] == player && board[i][1] == player && board[i][2] == player)\n            return true;\n        if (board[0][i] == player && board[1][i] == player && board[2][i] == player)\n            return true;\n    }\n    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)\n        return true;\n    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)\n        return true;\n    return false;\n}"
                  },
                  {
                    "step_id": "JP3_T4_S2",
                    "step_name": "Announce the Winner",
                    "description": "If `checkWin` returns true, end the game and announce the winner.",
                    "guidelines": [
                      "After each move, call checkWin() with the current player.",
                      "If true, break the game loop."
                    ],
                    "why": [
                      "Handles the game-ending condition."
                    ],
                    "starting_code": "if (checkWin(board, currentPlayer)) {\n    // Win logic\n}",
                    "final_code": "if (checkWin(board, currentPlayer)) {\n    System.out.println(\"Player \" + currentPlayer + \" wins!\");\n    break;\n}"
                  }
                ]
              },
              {
                "task_id": "JP3_T5",
                "task_name": "Add Replay Option",
                "description": "Add Replay Option in the Tic-Tac-Toe project.",
                "steps": [
                  {
                    "step_id": "JP3_T5_S1",
                    "step_name": "Ask to Replay After Game Ends",
                    "description": "Prompt users if they want to play again. Reset the board if yes.",
                    "guidelines": [
                      "Use Scanner to ask yes/no.",
                      "Reinitialize the board and counters if yes."
                    ],
                    "why": [
                      "Improves user experience by allowing multiple games."
                    ],
                    "starting_code": "System.out.print(\"Play again? (yes/no): \");",
                    "final_code": "System.out.print(\"Play again? (yes/no): \");\nString again = sc.next();\nif (again.equalsIgnoreCase(\"yes\")) {\n    // Reset game state\n} else {\n    break;\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "JP4",
            "project_name": "Library Management System",
            "description": "Build a console-based Library Management System in Java with functionalities like adding, viewing, issuing, and returning books.",
            "difficulty": "Intermediate",
            "tasks": [
              {
                "task_id": "JP4_T1",
                "task_name": "Setup Your Project Structure",
                "description": "Setup Your Project Structure in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T1_S1",
                    "step_name": "Create the Main Class LibrarySystem",
                    "description": "Create a file named LibrarySystem.java with the main method.",
                    "guidelines": [
                      "Use a public class named LibrarySystem.",
                      "Include the main method as the entry point."
                    ],
                    "why": [
                      "This sets up the foundation of your Java project."
                    ],
                    "starting_code": "public class LibrarySystem {\n    public static void main(String[] args) {\n        // Start here\n    }\n}",
                    "final_code": "public class LibrarySystem {\n    public static void main(String[] args) {\n        System.out.println(\"Welcome to the Library Management System!\");\n    }\n}"
                  },
                  {
                    "step_id": "JP4_T1_S2",
                    "step_name": "Setup Required Imports",
                    "description": "Import essential Java packages.",
                    "guidelines": [
                      "Use Scanner for input collection.",
                      "Use ArrayList to store book objects."
                    ],
                    "why": [
                      "Imports are necessary to use standard Java utilities."
                    ],
                    "starting_code": "// import java.util.*;",
                    "final_code": "import java.util.ArrayList;\nimport java.util.Scanner;"
                  }
                ]
              },
              {
                "task_id": "JP4_T2",
                "task_name": "Create the Book Class",
                "description": "Create the Book Class in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T2_S1",
                    "step_name": "Define Book Attributes",
                    "description": "Create a Book class with fields like id, title, author, and isIssued.",
                    "guidelines": [
                      "Make the fields public or use private with a constructor.",
                      "Use boolean for issue status."
                    ],
                    "why": [
                      "Models each book in the system as an object."
                    ],
                    "starting_code": "public class Book {\n    int id;\n    String title;\n    String author;\n    boolean isIssued;\n}",
                    "final_code": "public class Book {\n    int id;\n    String title;\n    String author;\n    boolean isIssued;\n\n    public Book(int id, String title, String author) {\n        this.id = id;\n        this.title = title;\n        this.author = author;\n        this.isIssued = false;\n    }\n\n    public String toString() {\n        return \"ID: \" + id + \", Title: \" + title + \", Author: \" + author + \", Issued: \" + isIssued;\n    }\n}"
                  }
                ]
              },
              {
                "task_id": "JP4_T3",
                "task_name": "Setup the Book Inventory",
                "description": "Setup the Book Inventory in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T3_S1",
                    "step_name": "Initialize Book List",
                    "description": "Use an ArrayList to store books.",
                    "guidelines": [
                      "Declare it as a static field in LibrarySystem."
                    ],
                    "why": [
                      "Stores all books dynamically."
                    ],
                    "starting_code": "// static ArrayList<Book> books;",
                    "final_code": "static ArrayList<Book> books = new ArrayList<>();"
                  },
                  {
                    "step_id": "JP4_T3_S2",
                    "step_name": "Add Sample Books for Testing",
                    "description": "Manually insert a few books to test the system.",
                    "guidelines": [
                      "Use the constructor to create book objects and add to list."
                    ],
                    "why": [
                      "Useful for testing before full interaction is implemented."
                    ],
                    "starting_code": "// books.add(new Book(...));",
                    "final_code": "books.add(new Book(1, \"1984\", \"George Orwell\"));\nbooks.add(new Book(2, \"The Hobbit\", \"J.R.R. Tolkien\"));"
                  }
                ]
              },
              {
                "task_id": "JP4_T4",
                "task_name": "Add Book Functionality",
                "description": "Add Book Functionality in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T4_S1",
                    "step_name": "Collect Book Details",
                    "description": "Ask the user for book id, title, and author.",
                    "guidelines": [
                      "Use Scanner to input id, title, author.",
                      "Use nextLine() after nextInt()."
                    ],
                    "why": [
                      "Gets user data for creating book entries."
                    ],
                    "starting_code": "// Input book fields",
                    "final_code": "System.out.print(\"Enter Book ID: \");\nint id = sc.nextInt();\nsc.nextLine();\nSystem.out.print(\"Enter Title: \");\nString title = sc.nextLine();\nSystem.out.print(\"Enter Author: \");\nString author = sc.nextLine();"
                  },
                  {
                    "step_id": "JP4_T4_S2",
                    "step_name": "Add New Book to List",
                    "description": "Create and add the new Book object to the inventory list.",
                    "guidelines": [
                      "Use constructor and add() method."
                    ],
                    "why": [
                      "Stores the user-provided book into your system."
                    ],
                    "starting_code": "// books.add(new Book(...));",
                    "final_code": "books.add(new Book(id, title, author));\nSystem.out.println(\"Book added successfully!\");"
                  }
                ]
              },
              {
                "task_id": "JP4_T5",
                "task_name": "View All Books",
                "description": "View All Books in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T5_S1",
                    "step_name": "Loop and Display Books",
                    "description": "Print all the book details in the list.",
                    "guidelines": [
                      "Use an enhanced for-loop to iterate and print."
                    ],
                    "why": [
                      "Displays current inventory."
                    ],
                    "starting_code": "// for (Book book : books)",
                    "final_code": "for (Book book : books) {\n    System.out.println(book);\n}"
                  }
                ]
              },
              {
                "task_id": "JP4_T6",
                "task_name": "Issue a Book",
                "description": "Issue a Book in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T6_S1",
                    "step_name": "Search Book by ID",
                    "description": "Check list to find the book and issue it if available.",
                    "guidelines": [
                      "Loop through books, compare ID and check isIssued."
                    ],
                    "why": [
                      "Lets user borrow a book."
                    ],
                    "starting_code": "// if (book.id == id && !book.isIssued)",
                    "final_code": "for (Book b : books) {\n    if (b.id == id && !b.isIssued) {\n        b.isIssued = true;\n        System.out.println(\"Book issued successfully.\");\n        return;\n    }\n}\nSystem.out.println(\"Book not found or already issued.\");"
                  }
                ]
              },
              {
                "task_id": "JP4_T7",
                "task_name": "Return a Book",
                "description": "Return a Book in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T7_S1",
                    "step_name": "Mark Book as Returned",
                    "description": "Set isIssued to false for the returned book.",
                    "guidelines": [
                      "Find book by ID and ensure it's currently issued."
                    ],
                    "why": [
                      "Lets users return books they've borrowed."
                    ],
                    "starting_code": "// if (book.id == id && book.isIssued)",
                    "final_code": "for (Book b : books) {\n    if (b.id == id && b.isIssued) {\n        b.isIssued = false;\n        System.out.println(\"Book returned successfully.\");\n        return;\n    }\n}\nSystem.out.println(\"Book not found or wasn\u2019t issued.\");"
                  }
                ]
              },
              {
                "task_id": "JP4_T8",
                "task_name": "Add Menu System",
                "description": "Add Menu System in the Library Management System project.",
                "steps": [
                  {
                    "step_id": "JP4_T8_S1",
                    "step_name": "Implement Menu Loop",
                    "description": "Provide options and call methods accordingly.",
                    "guidelines": [
                      "Use while(true) and switch statement for user interaction."
                    ],
                    "why": [
                      "Provides easy navigation for users."
                    ],
                    "starting_code": "// menu with options 1-5",
                    "final_code": "while (true) {\n    System.out.println(\"\\n1. Add Book\\n2. View Books\\n3. Issue Book\\n4. Return Book\\n5. Exit\");\n    int choice = sc.nextInt();\n    switch (choice) {\n        case 1: /* addBook() */ break;\n        case 2: /* viewBooks() */ break;\n        case 3: /* issueBook() */ break;\n        case 4: /* returnBook() */ break;\n        case 5: return;\n        default: System.out.println(\"Invalid choice.\");\n    }\n}"
                  
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J5",
            "project_name": "Library Management System",
            "description": "Manage books, issue records, and users of a library system.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "5_T1",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 5.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T2",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 5.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T3",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 5.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T4",
                    "task_name": "Add Custom Features",
                    "description": "Add Custom Features for project 5.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T5",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 5.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T6",
                    "task_name": "Test and Debug",
                    "description": "Test and Debug for project 5.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T7",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 5.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T8",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 5.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T9",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 5.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J6",
            "project_name": "Weather App (API)",
            "description": "Fetch and display weather data using a public API.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "6_T1",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 6.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T2",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 6.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T3",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 6.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T4",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 6.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T5",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 6.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T6",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 6.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T7",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 6.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T8",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 6.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J7",
            "project_name": "Online Quiz System",
            "description": "Create a quiz interface with score tracking and result display.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "7_T1",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 7.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T2",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 7.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T3",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 7.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T4",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 7.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T5",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 7.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T6",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 7.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T7",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 7.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T8",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 7.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T9",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 7.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T10",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 7.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J8",
            "project_name": "File Compression Tool",
            "description": "Build a tool to compress and decompress files using Java I/O.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "8_T1",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 8.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T2",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 8.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T3",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 8.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T4",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 8.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T5",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 8.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T6",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 8.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T7",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 8.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T8",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 8.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T9",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 8.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T10",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 8.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T11",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 8.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J9",
            "project_name": "To-Do List App",
            "description": "Create a GUI to-do list application using JavaFX.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "9_T1",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 9.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S10",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T2",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 9.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S10",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T3",
                    "task_name": "Add Custom Features",
                    "description": "Add Custom Features for project 9.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S10",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T4",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 9.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S10",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T5",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 9.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S10",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T6",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 9.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S10",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T7",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 9.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S10",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T8",
                    "task_name": "Add Custom Features",
                    "description": "Add Custom Features for project 9.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S10",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T9",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 9.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S10",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T10",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 9.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S10",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J10",
            "project_name": "Chat Application",
            "description": "A simple client-server based chat application using sockets.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "10_T1",
                    "task_name": "Test and Debug",
                    "description": "Test and Debug for project 10.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T2",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 10.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T3",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 10.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T4",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 10.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T5",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 10.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T6",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 10.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T7",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 10.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T8",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 10.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T9",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 10.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T10",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 10.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T11",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 10.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T12",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 10.",
                    "steps": [
                        {
                            "step_id": "T12_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S5",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        }
    ]
}