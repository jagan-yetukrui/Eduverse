{
    "projects": [
        {
            "project_id": "J1",
            "project_name": "Simple Calculator",
            "description": "Create a GUI-based calculator for basic operations using Java Swing.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "1_T1",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 1.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "1_T2",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 1.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "1_T3",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 1.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "1_T4",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 1.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "1_T5",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 1.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "1_T6",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 1.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "1_T7",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 1.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J2",
            "project_name": "Student Management System",
            "description": "A system to manage student records including add, edit, delete, and display.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "2_T1",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 2.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "2_T2",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 2.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "2_T3",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 2.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "2_T4",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 2.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "2_T5",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 2.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "2_T6",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 2.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "2_T7",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 2.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J3",
            "project_name": "Bank Management System",
            "description": "A basic system to simulate banking operations like deposit, withdraw, and balance check.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "3_T1",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 3.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "3_T2",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 3.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "3_T3",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 3.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "3_T4",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 3.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "3_T5",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 3.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "3_T6",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 3.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "3_T7",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 3.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "3_T8",
                    "task_name": "Test and Debug",
                    "description": "Test and Debug for project 3.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J4",
            "project_name": "Tic-Tac-Toe Game",
            "description": "A two-player console-based game implementation of Tic-Tac-Toe.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "4_T1",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 4.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "4_T2",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 4.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "4_T3",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 4.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "4_T4",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 4.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "4_T5",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 4.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "4_T6",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 4.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "4_T7",
                    "task_name": "Add Custom Features",
                    "description": "Add Custom Features for project 4.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J5",
            "project_name": "Library Management System",
            "description": "Manage books, issue records, and users of a library system.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "5_T1",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 5.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T2",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 5.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T3",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 5.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T4",
                    "task_name": "Add Custom Features",
                    "description": "Add Custom Features for project 5.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T5",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 5.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T6",
                    "task_name": "Test and Debug",
                    "description": "Test and Debug for project 5.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T7",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 5.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T8",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 5.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "5_T9",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 5.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J6",
            "project_name": "Weather App (API)",
            "description": "Fetch and display weather data using a public API.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "6_T1",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 6.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T2",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 6.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T3",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 6.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T4",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 6.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T5",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 6.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T6",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 6.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T7",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 6.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "6_T8",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 6.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J7",
            "project_name": "Online Quiz System",
            "description": "Create a quiz interface with score tracking and result display.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "7_T1",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 7.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T2",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 7.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T3",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 7.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T4",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 7.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T5",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 7.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T6",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 7.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T7",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 7.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T8",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 7.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T9",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 7.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "7_T10",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 7.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J8",
            "project_name": "File Compression Tool",
            "description": "Build a tool to compress and decompress files using Java I/O.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "8_T1",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 8.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T2",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 8.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T3",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 8.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T4",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 8.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T5",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 8.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T6",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 8.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T7",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 8.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T8",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 8.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T9",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 8.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T10",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 8.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "8_T11",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 8.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J9",
            "project_name": "To-Do List App",
            "description": "Create a GUI to-do list application using JavaFX.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "9_T1",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 9.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S10",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T2",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 9.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S10",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T3",
                    "task_name": "Add Custom Features",
                    "description": "Add Custom Features for project 9.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S10",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T4",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 9.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S10",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T5",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 9.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S10",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T6",
                    "task_name": "Add User Input",
                    "description": "Add User Input for project 9.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S10",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T7",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 9.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S10",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T8",
                    "task_name": "Add Custom Features",
                    "description": "Add Custom Features for project 9.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S10",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T9",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 9.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S10",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "9_T10",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 9.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step9 {\n    public void execute() {\n        int result = 9 * 2;\n        System.out.println(\"Result of step 9: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S10",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step10 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step10 {\n    public void execute() {\n        int result = 10 * 2;\n        System.out.println(\"Result of step 10: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "J10",
            "project_name": "Chat Application",
            "description": "A simple client-server based chat application using sockets.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "10_T1",
                    "task_name": "Test and Debug",
                    "description": "Test and Debug for project 10.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T2",
                    "task_name": "Create the Core Logic",
                    "description": "Create the Core Logic for project 10.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T3",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 10.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T4",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 10.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T5",
                    "task_name": "Refactor the Code",
                    "description": "Refactor the Code for project 10.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T6",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 10.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T7",
                    "task_name": "Setup the Environment",
                    "description": "Setup the Environment for project 10.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Optimize the Code",
                            "description": "Implement the logic for Optimize the Code.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Optimize the Code\n    }\n}",
                            "final_code": "// Final code for Optimize the Code\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T8",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 10.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Add Error Handling",
                            "description": "Implement the logic for Add Error Handling.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Add Error Handling\n    }\n}",
                            "final_code": "// Final code for Add Error Handling\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T9",
                    "task_name": "Define the Data Structure",
                    "description": "Define the Data Structure for project 10.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T10",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 10.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T11",
                    "task_name": "Implement Error Handling",
                    "description": "Implement Error Handling for project 10.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Handle User Input",
                            "description": "Implement the logic for Handle User Input.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Handle User Input\n    }\n}",
                            "final_code": "// Final code for Handle User Input\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Set Up the Database",
                            "description": "Implement the logic for Set Up the Database.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Set Up the Database\n    }\n}",
                            "final_code": "// Final code for Set Up the Database\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                },
                {
                    "task_id": "10_T12",
                    "task_name": "Handle Edge Cases",
                    "description": "Handle Edge Cases for project 10.",
                    "steps": [
                        {
                            "step_id": "T12_S1",
                            "step_name": "Connect to an API",
                            "description": "Implement the logic for Connect to an API.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        // TODO: Implement the logic for Connect to an API\n    }\n}",
                            "final_code": "// Final code for Connect to an API\npublic class Step1 {\n    public void execute() {\n        int result = 1 * 2;\n        System.out.println(\"Result of step 1: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S2",
                            "step_name": "Write the Function",
                            "description": "Implement the logic for Write the Function.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Write the Function\npublic class Step2 {\n    public void execute() {\n        // TODO: Implement the logic for Write the Function\n    }\n}",
                            "final_code": "// Final code for Write the Function\npublic class Step2 {\n    public void execute() {\n        int result = 2 * 2;\n        System.out.println(\"Result of step 2: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S3",
                            "step_name": "Create a Loop",
                            "description": "Implement the logic for Create a Loop.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        // TODO: Implement the logic for Create a Loop\n    }\n}",
                            "final_code": "// Final code for Create a Loop\npublic class Step3 {\n    public void execute() {\n        int result = 3 * 2;\n        System.out.println(\"Result of step 3: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S4",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step4 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step4 {\n    public void execute() {\n        int result = 4 * 2;\n        System.out.println(\"Result of step 4: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S5",
                            "step_name": "Format Data",
                            "description": "Implement the logic for Format Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Format Data\npublic class Step5 {\n    public void execute() {\n        // TODO: Implement the logic for Format Data\n    }\n}",
                            "final_code": "// Final code for Format Data\npublic class Step5 {\n    public void execute() {\n        int result = 5 * 2;\n        System.out.println(\"Result of step 5: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S6",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step6 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step6 {\n    public void execute() {\n        int result = 6 * 2;\n        System.out.println(\"Result of step 6: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S7",
                            "step_name": "Validate Data",
                            "description": "Implement the logic for Validate Data.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Validate Data\npublic class Step7 {\n    public void execute() {\n        // TODO: Implement the logic for Validate Data\n    }\n}",
                            "final_code": "// Final code for Validate Data\npublic class Step7 {\n    public void execute() {\n        int result = 7 * 2;\n        System.out.println(\"Result of step 7: \" + result);\n    }\n}"
                        },
                        {
                            "step_id": "T12_S8",
                            "step_name": "Display Output",
                            "description": "Implement the logic for Display Output.",
                            "guidelines": [
                                "1. Understand what this step is trying to accomplish.",
                                "2. Consider the Java class and method structure you'll need.",
                                "3. Use proper object-oriented programming principles.",
                                "4. Keep your methods short and focused on a single task.",
                                "5. Handle potential runtime exceptions gracefully."
                            ],
                            "hints": [
                                "Use interfaces or abstract classes where appropriate.",
                                "Remember to encapsulate your class fields.",
                                "Make use of Java collections for managing lists or maps.",
                                "Think about how to structure your loops and conditions.",
                                "Don't forget about input validation and edge cases."
                            ],
                            "starting_code": "// Starting code for Display Output\npublic class Step8 {\n    public void execute() {\n        // TODO: Implement the logic for Display Output\n    }\n}",
                            "final_code": "// Final code for Display Output\npublic class Step8 {\n    public void execute() {\n        int result = 8 * 2;\n        System.out.println(\"Result of step 8: \" + result);\n    }\n}"
                        }
                    ]
                }
            ]
        }
    ]
}