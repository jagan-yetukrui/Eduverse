{
    "projects": [
        {
            "project_id": "N1",
            "project_name": "Simple REST API",
            "description": "Build a basic RESTful API using Express.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "1_T1",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 1.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "1_T2",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 1.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "1_T3",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 1.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "1_T4",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 1.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "1_T5",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 1.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "1_T6",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 1.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "1_T7",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 1.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N2",
            "project_name": "Authentication System",
            "description": "Implement user authentication with JWT and bcrypt.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "2_T1",
                    "task_name": "Test API",
                    "description": "Test API for project 2.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "2_T2",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 2.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "2_T3",
                    "task_name": "Create Endpoints",
                    "description": "Create Endpoints for project 2.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "2_T4",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 2.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "2_T5",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 2.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "2_T6",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 2.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "2_T7",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 2.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N3",
            "project_name": "Todo App Backend",
            "description": "A backend for a to-do app with CRUD operations.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "3_T1",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 3.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "3_T2",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 3.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "3_T3",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 3.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "3_T4",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 3.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "3_T5",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 3.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "3_T6",
                    "task_name": "Create Endpoints",
                    "description": "Create Endpoints for project 3.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "3_T7",
                    "task_name": "Add Validation",
                    "description": "Add Validation for project 3.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "3_T8",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 3.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N4",
            "project_name": "File Uploader",
            "description": "Create an API for file uploads with Multer.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "4_T1",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 4.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "4_T2",
                    "task_name": "Add Validation",
                    "description": "Add Validation for project 4.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "4_T3",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 4.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "4_T4",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 4.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "4_T5",
                    "task_name": "Test API",
                    "description": "Test API for project 4.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "4_T6",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 4.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "4_T7",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 4.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "4_T8",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 4.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N5",
            "project_name": "Real-Time Chat App",
            "description": "Build a chat server using Socket.io.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "5_T1",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 5.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T2",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 5.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T3",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 5.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T4",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 5.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T5",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 5.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T6",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 5.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T7",
                    "task_name": "Add Validation",
                    "description": "Add Validation for project 5.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T8",
                    "task_name": "Add Validation",
                    "description": "Add Validation for project 5.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T9",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 5.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "5_T10",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 5.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N6",
            "project_name": "Blog API",
            "description": "Develop a REST API for blog posts and comments.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "6_T1",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 6.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "6_T2",
                    "task_name": "Test API",
                    "description": "Test API for project 6.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "6_T3",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 6.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "6_T4",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 6.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "6_T5",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 6.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "6_T6",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 6.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "6_T7",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 6.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "6_T8",
                    "task_name": "Add Validation",
                    "description": "Add Validation for project 6.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N7",
            "project_name": "E-commerce Backend",
            "description": "Build a backend for an e-commerce platform.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "7_T1",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 7.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "7_T2",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 7.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "7_T3",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 7.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "7_T4",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 7.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "7_T5",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 7.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "7_T6",
                    "task_name": "Test API",
                    "description": "Test API for project 7.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "7_T7",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 7.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "7_T8",
                    "task_name": "Add Validation",
                    "description": "Add Validation for project 7.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N8",
            "project_name": "Weather API Proxy",
            "description": "Create a proxy server to fetch and cache weather data.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "8_T1",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 8.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T2",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 8.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T3",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 8.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T4",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 8.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T5",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 8.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T6",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 8.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T7",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 8.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T8",
                    "task_name": "Add Validation",
                    "description": "Add Validation for project 8.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T9",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 8.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "8_T10",
                    "task_name": "Create Endpoints",
                    "description": "Create Endpoints for project 8.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N9",
            "project_name": "PDF Generator",
            "description": "Generate downloadable PDFs from user input.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "9_T1",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 9.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T2",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 9.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T3",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 9.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T4",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 9.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T5",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 9.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T6",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 9.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T7",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 9.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T8",
                    "task_name": "Create Endpoints",
                    "description": "Create Endpoints for project 9.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T9",
                    "task_name": "Project Initialization",
                    "description": "Project Initialization for project 9.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T10",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 9.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "9_T11",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 9.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S9",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "N10",
            "project_name": "URL Shortener",
            "description": "Develop a URL shortener service using Node.js and MongoDB.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "10_T1",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 10.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T2",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 10.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T3",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 10.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T4",
                    "task_name": "Set Up Database",
                    "description": "Set Up Database for project 10.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T5",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 10.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T6",
                    "task_name": "Deploy Application",
                    "description": "Deploy Application for project 10.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T7",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 10.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T8",
                    "task_name": "Install Dependencies",
                    "description": "Install Dependencies for project 10.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T9",
                    "task_name": "Configure Middleware",
                    "description": "Configure Middleware for project 10.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Install Express",
                            "description": "Implement the logic for Install Express.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Install Express\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Install Express logic here",
                            "final_code": "// Final code for Install Express\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T10",
                    "task_name": "Implement Controllers",
                    "description": "Implement Controllers for project 10.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Add Input Validation",
                            "description": "Implement the logic for Add Input Validation.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Add Input Validation logic here",
                            "final_code": "// Final code for Add Input Validation\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Handle File Uploads",
                            "description": "Implement the logic for Handle File Uploads.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Handle File Uploads logic here",
                            "final_code": "// Final code for Handle File Uploads\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Define Route Handlers",
                            "description": "Implement the logic for Define Route Handlers.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Define Route Handlers logic here",
                            "final_code": "// Final code for Define Route Handlers\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Create Models",
                            "description": "Implement the logic for Create Models.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Create Models\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Create Models logic here",
                            "final_code": "// Final code for Create Models\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                },
                {
                    "task_id": "10_T11",
                    "task_name": "Handle Authentication",
                    "description": "Handle Authentication for project 10.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step1', (req, res) => {\n    res.json({ message: 'Step 1 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step2', (req, res) => {\n    res.json({ message: 'Step 2 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Write Unit Tests",
                            "description": "Implement the logic for Write Unit Tests.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Write Unit Tests logic here",
                            "final_code": "// Final code for Write Unit Tests\nconst express = require('express');\nconst app = express();\n\napp.get('/step3', (req, res) => {\n    res.json({ message: 'Step 3 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step4', (req, res) => {\n    res.json({ message: 'Step 4 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Deploy to Render",
                            "description": "Implement the logic for Deploy to Render.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Deploy to Render logic here",
                            "final_code": "// Final code for Deploy to Render\nconst express = require('express');\nconst app = express();\n\napp.get('/step5', (req, res) => {\n    res.json({ message: 'Step 5 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Implement JWT Auth",
                            "description": "Implement the logic for Implement JWT Auth.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Implement JWT Auth logic here",
                            "final_code": "// Final code for Implement JWT Auth\nconst express = require('express');\nconst app = express();\n\napp.get('/step6', (req, res) => {\n    res.json({ message: 'Step 6 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step7', (req, res) => {\n    res.json({ message: 'Step 7 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Initialize npm Project",
                            "description": "Implement the logic for Initialize npm Project.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Initialize npm Project logic here",
                            "final_code": "// Final code for Initialize npm Project\nconst express = require('express');\nconst app = express();\n\napp.get('/step8', (req, res) => {\n    res.json({ message: 'Step 8 completed.' });\n});"
                        },
                        {
                            "step_id": "T11_S9",
                            "step_name": "Set Up MongoDB Connection",
                            "description": "Implement the logic for Set Up MongoDB Connection.",
                            "guidelines": [
                                "1. Read and understand the goal of the current step.",
                                "2. Apply relevant Node.js or Express concepts to structure your code.",
                                "3. Keep your code modular by separating concerns.",
                                "4. Test the code using Postman or a testing framework.",
                                "5. Refactor for clarity and reusability after completion."
                            ],
                            "hints": [
                                "Use `express.Router()` for organizing routes.",
                                "Use `mongoose` to define and interact with the database schema.",
                                "Use `jsonwebtoken` to sign and verify tokens.",
                                "Use `multer` for handling file uploads in multipart/form-data format.",
                                "Use `dotenv` to manage your environment variables."
                            ],
                            "starting_code": "// Starting code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\n// TODO: Implement Set Up MongoDB Connection logic here",
                            "final_code": "// Final code for Set Up MongoDB Connection\nconst express = require('express');\nconst app = express();\n\napp.get('/step9', (req, res) => {\n    res.json({ message: 'Step 9 completed.' });\n});"
                        }
                    ]
                }
            ]
        }
    ]
}