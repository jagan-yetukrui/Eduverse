{
    "projects": [
        {
            "project_id": "S1",
            "project_name": "Library Database",
            "description": "Design and query a database for managing books, authors, and users.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "1_T1",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 1.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Group results by keys that match the analysis goal.",
                                "Make sure column names are referenced from the correct table.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "why": [
                                "This step helps in understanding joins with filtering conditions."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Consider what filtering condition best narrows down your results.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think about what columns might contain NULL values.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "why": [
                                "This step provides insight into data normalization and structure."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Use HAVING to filter aggregated results.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "why": [
                                "This step prepares the learner for building advanced queries using nested SELECT statements."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "why": [
                                "This step explains the importance of testing query output incrementally."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "1_T2",
                    "task_name": "Create Views",
                    "description": "Create Views for project 1.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Group results by keys that match the analysis goal.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "why": [
                                "This step introduces fundamental SQL syntax and structure."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "why": [
                                "This step encourages use of aliases for better query readability."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure column names are referenced from the correct table.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "why": [
                                "This step is about enforcing best practices in naming conventions and formatting."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "Make sure column names are referenced from the correct table.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "why": [
                                "This step helps understand the application of subqueries."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "1_T3",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 1.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think about which tables need to be joined and how they relate.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "why": [
                                "This step focuses on updating existing records in a database."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "why": [
                                "This step applies logical conditions to filter query output."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "why": [
                                "This step reinforces combining aggregate functions with filtering."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively.",
                                "Review execution time using runtime analysis tools.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "why": [
                                "This step enhances knowledge of indexing for performance gains."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "1_T4",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 1.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about which tables need to be joined and how they relate.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step demonstrates use of pattern matching in queries."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "why": [
                                "This step introduces the use of UNION for combining result sets."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "why": [
                                "This step demonstrates how to retrieve specific data from a table."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Group results by keys that match the analysis goal.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "why": [
                                "This step teaches how to join data from multiple related tables."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "1_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 1.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Write and run your query in small parts to debug effectively.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think about what columns might contain NULL values.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "why": [
                                "This step covers using CASE statements for conditional logic in SQL."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use a CTE to simplify and organize a long query.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "why": [
                                "This step builds proficiency in altering database table structures."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "why": [
                                "This step shows how to delete records based on specific conditions."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Group results by keys that match the analysis goal."
                            ],
                            "why": [
                                "This step covers grouping data and performing aggregate calculations."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "1_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 1.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COALESCE to handle NULL values in output.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "why": [
                                "This step promotes efficient query design for scalability and maintenance."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "why": [
                                "This step supports the creation of constraints for data integrity."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Review execution time using runtime analysis tools.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "why": [
                                "This step focuses on using filters to narrow down query results."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "why": [
                                "This step explains how to sort query results for better readability."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "1_T7",
                    "task_name": "Create Views",
                    "description": "Create Views for project 1.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Use HAVING to filter aggregated results.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "why": [
                                "This step introduces the concept of views for reusable queries."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Think about what columns might contain NULL values.",
                                "Use table aliases to make your SQL more readable.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "1_T8",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 1.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Consider what filtering condition best narrows down your results.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use table aliases to make your SQL more readable.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;",
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S2",
            "project_name": "E-Commerce Orders",
            "description": "Analyze orders and customers from an e-commerce database.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "2_T1",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 2.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Review the schema to understand how tables are related.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use table aliases to make your SQL more readable.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Group results by keys that match the analysis goal.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use a CTE to simplify and organize a long query.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use a CTE to simplify and organize a long query.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "2_T2",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 2.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use table aliases to make your SQL more readable.",
                                "Review execution time using runtime analysis tools.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "2_T3",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 2.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Group results by keys that match the analysis goal.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use COALESCE to handle NULL values in output.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Group results by keys that match the analysis goal.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Think about which tables need to be joined and how they relate.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "2_T4",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 2.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Check if your filtering should happen before or after grouping.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Think about what columns might contain NULL values.",
                                "Review execution time using runtime analysis tools.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think about which tables need to be joined and how they relate.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "2_T5",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 2.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think about what columns might contain NULL values.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "2_T6",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 2.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use COALESCE to handle NULL values in output.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Review execution time using runtime analysis tools.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use table aliases to make your SQL more readable.",
                                "Review execution time using runtime analysis tools.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Group results by keys that match the analysis goal.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S3",
            "project_name": "Student Grades System",
            "description": "Track students, courses, and grades in an academic system.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "3_T1",
                    "task_name": "Create Views",
                    "description": "Create Views for project 3.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Think about what columns might contain NULL values.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COALESCE to handle NULL values in output.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "3_T2",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 3.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Write and run your query in small parts to debug effectively.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "Test the logic of your CASE statement with simple examples."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "3_T3",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 3.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use COALESCE to handle NULL values in output.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "3_T4",
                    "task_name": "Create Views",
                    "description": "Create Views for project 3.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Make sure column names are referenced from the correct table.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Group results by keys that match the analysis goal.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure column names are referenced from the correct table.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "3_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 3.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use a CTE to simplify and organize a long query.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COALESCE to handle NULL values in output.",
                                "Write and run your query in small parts to debug effectively.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Test the logic of your CASE statement with simple examples.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Make sure column names are referenced from the correct table.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Review execution time using runtime analysis tools.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "3_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 3.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Review the schema to understand how tables are related.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think about what columns might contain NULL values.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Use COALESCE to handle NULL values in output.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "3_T7",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 3.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Use COALESCE to handle NULL values in output.",
                                "Group results by keys that match the analysis goal.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use table aliases to make your SQL more readable.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Keep your joins clean by verifying ON conditions carefully."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S4",
            "project_name": "Hospital Management",
            "description": "Build queries to manage patients, doctors, and appointments.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "4_T1",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 4.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use table aliases to make your SQL more readable.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use CASE WHEN to segment your results into categories.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "4_T2",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 4.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use table aliases to make your SQL more readable.",
                                "Make sure column names are referenced from the correct table.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use table aliases to make your SQL more readable.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Use table aliases to make your SQL more readable.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use the EXPLAIN command to check how your query runs.",
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "4_T3",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 4.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Review the schema to understand how tables are related.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Review the schema to understand how tables are related.",
                                "Test the logic of your CASE statement with simple examples.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Review the schema to understand how tables are related.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Review the schema to understand how tables are related.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "4_T4",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 4.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Keep your joins clean by verifying ON conditions carefully."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Check if your filtering should happen before or after grouping.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Group results by keys that match the analysis goal.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Review execution time using runtime analysis tools.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "4_T5",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 4.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Use a CTE to simplify and organize a long query.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Consider what filtering condition best narrows down your results.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use table aliases to make your SQL more readable.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think about what columns might contain NULL values.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S5",
            "project_name": "Movie Database",
            "description": "Create and query a database of movies, actors, and reviews.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "5_T1",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Think about which tables need to be joined and how they relate.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use a CTE to simplify and organize a long query.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Use table aliases to make your SQL more readable.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T2",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 5.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use table aliases to make your SQL more readable.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure column names are referenced from the correct table.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T3",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 5.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Review execution time using runtime analysis tools.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Think about which tables need to be joined and how they relate.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Review execution time using runtime analysis tools.",
                                "Think about which tables need to be joined and how they relate.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T4",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Make sure column names are referenced from the correct table.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Check if your filtering should happen before or after grouping.",
                                "Group results by keys that match the analysis goal.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Review the schema to understand how tables are related.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think about what columns might contain NULL values.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Group results by keys that match the analysis goal.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use COALESCE to handle NULL values in output.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Review execution time using runtime analysis tools.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Group results by keys that match the analysis goal.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T6",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 5.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Use COALESCE to handle NULL values in output.",
                                "Think about what columns might contain NULL values.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Write and run your query in small parts to debug effectively.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure column names are referenced from the correct table.",
                                "Review execution time using runtime analysis tools.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Group results by keys that match the analysis goal.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T7",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Write and run your query in small parts to debug effectively.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Group results by keys that match the analysis goal.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try using a SELECT clause with specific column names instead of *."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use table aliases to make your SQL more readable.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T8",
                    "task_name": "Write Stored Procedures",
                    "description": "Write Stored Procedures for project 5.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use table aliases to make your SQL more readable.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use table aliases to make your SQL more readable.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Consider what filtering condition best narrows down your results.",
                                "Group results by keys that match the analysis goal.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T9",
                    "task_name": "Create Views",
                    "description": "Create Views for project 5.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Review execution time using runtime analysis tools.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Group results by keys that match the analysis goal.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Review the schema to understand how tables are related.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Write and run your query in small parts to debug effectively.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "5_T10",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 5.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Avoid aliasing confusion by staying consistent across joins."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make sure column names are referenced from the correct table.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Consider what filtering condition best narrows down your results.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Group results by keys that match the analysis goal.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S6",
            "project_name": "HR Database",
            "description": "Manage employees, departments, salaries, and job history.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "6_T1",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 6.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Write and run your query in small parts to debug effectively.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Think about what columns might contain NULL values.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use a CTE to simplify and organize a long query.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "6_T2",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 6.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use table aliases to make your SQL more readable.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Review execution time using runtime analysis tools.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Write and run your query in small parts to debug effectively.",
                                "Think about what columns might contain NULL values.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use table aliases to make your SQL more readable.",
                                "Make sure column names are referenced from the correct table.",
                                "Review execution time using runtime analysis tools.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "6_T3",
                    "task_name": "Create Views",
                    "description": "Create Views for project 6.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use CASE WHEN to segment your results into categories.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use a CTE to simplify and organize a long query.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Break complex logic into multiple SQL statements.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use a CTE to simplify and organize a long query.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use table aliases to make your SQL more readable.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use table aliases to make your SQL more readable.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "6_T4",
                    "task_name": "Create Views",
                    "description": "Create Views for project 6.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Think about what columns might contain NULL values.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think about which tables need to be joined and how they relate.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Use HAVING to filter aggregated results.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "6_T5",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 6.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use a CTE to simplify and organize a long query.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use COALESCE to handle NULL values in output.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use a CTE to simplify and organize a long query.",
                                "Review execution time using runtime analysis tools.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "6_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 6.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use a CTE to simplify and organize a long query.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Review the schema to understand how tables are related.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Keep your joins clean by verifying ON conditions carefully."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "6_T7",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 6.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Review the schema to understand how tables are related.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use COALESCE to handle NULL values in output.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Review the schema to understand how tables are related.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Think about what columns might contain NULL values.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Group results by keys that match the analysis goal.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Group results by keys that match the analysis goal.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "6_T8",
                    "task_name": "Create Views",
                    "description": "Create Views for project 6.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Review execution time using runtime analysis tools.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about what columns might contain NULL values.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Think about what columns might contain NULL values.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S7",
            "project_name": "Online Food Delivery",
            "description": "Track orders, restaurants, and delivery agents in a food app.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "7_T1",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 7.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use CASE WHEN to segment your results into categories.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Review the schema to understand how tables are related.",
                                "Group results by keys that match the analysis goal.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use table aliases to make your SQL more readable.",
                                "Make sure column names are referenced from the correct table.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "7_T2",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 7.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use the EXPLAIN command to check how your query runs.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about what columns might contain NULL values.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Think about what columns might contain NULL values.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "7_T3",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 7.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Write and run your query in small parts to debug effectively.",
                                "Review execution time using runtime analysis tools.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Use a CTE to simplify and organize a long query.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Make sure column names are referenced from the correct table.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "7_T4",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 7.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "7_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 7.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Check that the column used in ORDER BY exists in the SELECT clause.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Think about what columns might contain NULL values.",
                                "Make sure column names are referenced from the correct table.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COALESCE to handle NULL values in output.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make sure column names are referenced from the correct table.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Review execution time using runtime analysis tools.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Review the schema to understand how tables are related.",
                                "Write and run your query in small parts to debug effectively.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Think about what columns might contain NULL values.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "7_T6",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 7.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Think about what columns might contain NULL values.",
                                "Review execution time using runtime analysis tools.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Review the schema to understand how tables are related.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Review execution time using runtime analysis tools.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Group results by keys that match the analysis goal.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "7_T7",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 7.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Group results by keys that match the analysis goal.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Check if your filtering should happen before or after grouping.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think about what columns might contain NULL values.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Break complex logic into multiple SQL statements.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Write and run your query in small parts to debug effectively.",
                                "Review execution time using runtime analysis tools.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Review the schema to understand how tables are related.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think about which tables need to be joined and how they relate.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Group results by keys that match the analysis goal.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "7_T8",
                    "task_name": "Create Views",
                    "description": "Create Views for project 7.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think about what columns might contain NULL values.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use table aliases to make your SQL more readable.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use COALESCE to handle NULL values in output.",
                                "Write and run your query in small parts to debug effectively.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Group results by keys that match the analysis goal.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Review execution time using runtime analysis tools.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Review the schema to understand how tables are related.",
                                "Group results by keys that match the analysis goal.",
                                "Think about what columns might contain NULL values.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S8",
            "project_name": "Airline Reservation",
            "description": "Manage flights, bookings, customers, and schedules.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "8_T1",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 8.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try joining on a surrogate key instead of a natural key if available."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Think about what columns might contain NULL values.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Group results by keys that match the analysis goal.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T2",
                    "task_name": "Write Stored Procedures",
                    "description": "Write Stored Procedures for project 8.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use table aliases to make your SQL more readable.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use a CTE to simplify and organize a long query.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Review execution time using runtime analysis tools.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Review the schema to understand how tables are related.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Make sure column names are referenced from the correct table.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Write and run your query in small parts to debug effectively.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Keep your joins clean by verifying ON conditions carefully."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T3",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 8.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Review the schema to understand how tables are related.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think about which tables need to be joined and how they relate.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use table aliases to make your SQL more readable.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure column names are referenced from the correct table.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use the EXPLAIN command to check how your query runs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Check if your filtering should happen before or after grouping.",
                                "Think about what columns might contain NULL values.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Think about what columns might contain NULL values.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T4",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 8.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use COALESCE to handle NULL values in output.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Group results by keys that match the analysis goal.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Check if your filtering should happen before or after grouping.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Think about which tables need to be joined and how they relate.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Write and run your query in small parts to debug effectively.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Write and run your query in small parts to debug effectively.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Make sure column names are referenced from the correct table.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure column names are referenced from the correct table.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Review the schema to understand how tables are related.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T5",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 8.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Think about which tables need to be joined and how they relate.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Think about what columns might contain NULL values.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Group results by keys that match the analysis goal.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make sure column names are referenced from the correct table.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Make sure column names are referenced from the correct table.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Think about what columns might contain NULL values.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T6",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 8.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Check if your filtering should happen before or after grouping.",
                                "Write and run your query in small parts to debug effectively.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Make sure column names are referenced from the correct table.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COALESCE to handle NULL values in output.",
                                "Write and run your query in small parts to debug effectively.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Check if your filtering should happen before or after grouping.",
                                "Group results by keys that match the analysis goal.",
                                "Write and run your query in small parts to debug effectively.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Review the schema to understand how tables are related.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Review execution time using runtime analysis tools.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T7",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 8.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use table aliases to make your SQL more readable.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Review the schema to understand how tables are related.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Group results by keys that match the analysis goal.",
                                "Write and run your query in small parts to debug effectively.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Review execution time using runtime analysis tools.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Group results by keys that match the analysis goal.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T8",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 8.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use a CTE to simplify and organize a long query.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use COALESCE to handle NULL values in output.",
                                "Write and run your query in small parts to debug effectively.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use COALESCE to handle NULL values in output.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think about what columns might contain NULL values.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Group results by keys that match the analysis goal.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T9",
                    "task_name": "Write Stored Procedures",
                    "description": "Write Stored Procedures for project 8.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Check if your filtering should happen before or after grouping.",
                                "Think about what columns might contain NULL values.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use the EXPLAIN command to check how your query runs.",
                                "Review execution time using runtime analysis tools.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use table aliases to make your SQL more readable.",
                                "Review execution time using runtime analysis tools.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think about what columns might contain NULL values.",
                                "Avoid deeply nested queries unless absolutely necessary."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Write and run your query in small parts to debug effectively.",
                                "Think about what columns might contain NULL values.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "8_T10",
                    "task_name": "Create Views",
                    "description": "Create Views for project 8.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about what columns might contain NULL values.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think about what columns might contain NULL values.",
                                "Think about which tables need to be joined and how they relate.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Group results by keys that match the analysis goal.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Review execution time using runtime analysis tools.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Group results by keys that match the analysis goal.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 9 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S9",
            "project_name": "Inventory Tracker",
            "description": "Track products, stock levels, suppliers, and orders.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "9_T1",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make sure column names are referenced from the correct table.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think about what columns might contain NULL values.",
                                "Use table aliases to make your SQL more readable.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Group results by keys that match the analysis goal.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T2",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 9.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use a CTE to simplify and organize a long query.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Check if your filtering should happen before or after grouping.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Review execution time using runtime analysis tools.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Consider what filtering condition best narrows down your results.",
                                "Group results by keys that match the analysis goal.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Review execution time using runtime analysis tools.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T3",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 9.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Group results by keys that match the analysis goal.",
                                "Use table aliases to make your SQL more readable.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Consider what filtering condition best narrows down your results.",
                                "Review the schema to understand how tables are related.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Group results by keys that match the analysis goal.",
                                "Think of the audience reading your output\u2014format accordingly."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Group results by keys that match the analysis goal.",
                                "Test the logic of your CASE statement with simple examples."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Review the schema to understand how tables are related.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T4",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 9.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Write and run your query in small parts to debug effectively.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use COALESCE to handle NULL values in output.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 9.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Normalize data where appropriate for performance.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Always use ASC or DESC explicitly in ORDER BY."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Check execution plans for optimization.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Review the schema to understand how tables are related.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 9.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Consider what filtering condition best narrows down your results.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Make sure column names are referenced from the correct table.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Review execution time using runtime analysis tools.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Think about what columns might contain NULL values.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure every subquery returns the expected number of columns.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COALESCE to handle NULL values in output.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Think about which tables need to be joined and how they relate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Review the schema to understand how tables are related.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use CASE WHEN to segment your results into categories."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T7",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use table aliases to make your SQL more readable.",
                                "Think about which tables need to be joined and how they relate.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Check if your filtering should happen before or after grouping.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Join only necessary columns to keep queries efficient.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Group results by keys that match the analysis goal.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Review the schema to understand how tables are related.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Use table aliases to make your SQL more readable.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T8",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 9.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use table aliases to make your SQL more readable.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Write and run your query in small parts to debug effectively.",
                                "Use table aliases to make your SQL more readable.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Group results by keys that match the analysis goal.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Think about which tables need to be joined and how they relate."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Think about what columns might contain NULL values."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Group with GROUP BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T9",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 9.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Add comments for clarity in complicated SQL logic."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Consider what filtering condition best narrows down your results.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use DISTINCT to avoid duplicate rows in the result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Think about which tables need to be joined and how they relate.",
                                "ORDER BY works well with LIMIT to get top N results."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "Think about which tables need to be joined and how they relate.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Normalize data where appropriate for performance.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "When comparing strings, be aware of case sensitivity.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Use a CTE to simplify and organize a long query.",
                                "Review execution time using runtime analysis tools."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Foreign Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use a WHERE clause before GROUP BY to filter rows first.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Use HAVING to filter aggregated results.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Group results by keys that match the analysis goal.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Test the logic of your CASE statement with simple examples.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Create Indexes in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T10",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 9.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Think about what columns might contain NULL values.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Format SQL with proper indentation and casing.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Group results by keys that match the analysis goal.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use LIMIT to cap the number of rows returned.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Group results by keys that match the analysis goal.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Make sure column names are referenced from the correct table.",
                                "Review execution time using runtime analysis tools.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use a CTE to simplify and organize a long query.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Join only necessary columns to keep queries efficient.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity."
                            ],
                            "hints": [
                                "Experiment with temporary tables to test intermediate outputs.",
                                "Check if your filtering should happen before or after grouping.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Use Nested Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Review the schema to understand how tables are related.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Format SQL with proper indentation and casing.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Use table aliases to make your SQL more readable.",
                                "Use a CTE to simplify and organize a long query."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T11",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Format SQL with proper indentation and casing.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Avoid aliasing confusion by staying consistent across joins.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Review execution time using runtime analysis tools.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Sort with ORDER BY in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks.",
                                "Use JOIN clauses to combine data from multiple tables logically."
                            ],
                            "hints": [
                                "Review the schema to understand how tables are related.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try using a SELECT clause with specific column names instead of *.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "Index columns used in WHERE or ORDER BY.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Use LIKE with wildcards % and _ to match patterns.",
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Group results by keys that match the analysis goal.",
                                "Avoid deeply nested queries unless absolutely necessary.",
                                "Make use of SQL functions like NOW(), LENGTH(), or ROUND() as needed."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Build Complex Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Think about what columns might contain NULL values.",
                                "Use table aliases to make your SQL more readable.",
                                "Review execution time using runtime analysis tools.",
                                "Try writing the subquery independently to verify its result."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Consider what filtering condition best narrows down your results.",
                                "Think about index usage for WHERE and JOIN conditions.",
                                "Use COALESCE to handle NULL values in output.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Normalize data where appropriate for performance.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "When comparing strings, be aware of case sensitivity.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Review the schema to understand how tables are related.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use table aliases to make your SQL more readable.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Alias tables consistently in joins.",
                                "Use HAVING to filter aggregated results.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use CASE WHEN to segment your results into categories.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Think of the audience reading your output\u2014format accordingly.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                },
                {
                    "task_id": "9_T12",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T12_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Alias tables consistently in joins.",
                                "Normalize data where appropriate for performance.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Group results by keys that match the analysis goal.",
                                "Try joining on a surrogate key instead of a natural key if available."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T12_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "Ensure primary keys and foreign keys are defined correctly.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Break complex logic into multiple SQL statements.",
                                "Format SQL with proper indentation and casing."
                            ],
                            "hints": [
                                "Make sure the column you group by is present in the SELECT clause.",
                                "Use DISTINCT to avoid duplicate rows in the result.",
                                "Use INNER JOIN instead of LEFT JOIN when NULLs are not needed.",
                                "Keep your joins clean by verifying ON conditions carefully.",
                                "Make sure column names are referenced from the correct table."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Test and Optimize Queries in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T12_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use LIMIT to cap the number of rows returned."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use nested SELECTs when filtering by aggregated conditions.",
                                "Test the logic of your CASE statement with simple examples.",
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using a SELECT clause with specific column names instead of *."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Filter with WHERE in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T12_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Avoid deeply nested subqueries unless necessary.",
                                "Alias tables consistently in joins.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Normalize data where appropriate for performance.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Join only necessary columns to keep queries efficient.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Write and run your query in small parts to debug effectively.",
                                "Try joining on a surrogate key instead of a natural key if available.",
                                "Use table aliases to make your SQL more readable."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T12_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Avoid deeply nested subqueries unless necessary.",
                                "Avoid SELECT *; specify the columns you need for clarity.",
                                "Use EXISTS for efficient subquery checks.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use COALESCE to handle NULL values in output.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Use a CTE to simplify and organize a long query.",
                                "Make sure every subquery returns the expected number of columns."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T12_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "Use CTEs to improve readability of complex queries.",
                                "Check execution plans for optimization.",
                                "Test your query with small sample data first.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Validate data types before comparisons."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Review the schema to understand how tables are related.",
                                "Think about which tables need to be joined and how they relate.",
                                "ORDER BY works well with LIMIT to get top N results.",
                                "When stuck, try simplifying the query into smaller parts."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Define Primary Keys in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T12_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Test your query with small sample data first.",
                                "Break complex logic into multiple SQL statements.",
                                "Use GROUP BY to summarize data at meaningful levels.",
                                "Use JOIN clauses to combine data from multiple tables logically.",
                                "Handle NULL values deliberately and clearly."
                            ],
                            "hints": [
                                "Apply aggregate functions like COUNT() or AVG() where appropriate.",
                                "Try using UNION ALL instead of UNION for performance if duplicates don\u2019t matter.",
                                "Use a CTE to simplify and organize a long query.",
                                "When stuck, try simplifying the query into smaller parts.",
                                "Check that the column used in ORDER BY exists in the SELECT clause."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        },
                        {
                            "step_id": "T12_S8",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "Check execution plans for optimization.",
                                "Index columns used in WHERE or ORDER BY.",
                                "Always use ASC or DESC explicitly in ORDER BY.",
                                "Add comments for clarity in complicated SQL logic.",
                                "Use EXISTS for efficient subquery checks."
                            ],
                            "hints": [
                                "Check if your filtering should happen before or after grouping.",
                                "Use COUNT(1) for slightly better performance in some engines.",
                                "Use the EXPLAIN command to check how your query runs.",
                                "Try writing the subquery independently to verify its result.",
                                "Verify your date formats when comparing timestamps."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 8 AS step_number;",
                            "why": [
                                "This step focuses on SQL concepts tailored to Join Multiple Tables in context."
                            ],
                            "Output": [
                                "Expected output: SQL query results, schema changes, or confirmation of successful operations depending on the step."
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}