{
    "projects": [
        {
            "project_id": "S1",
            "project_name": "Library Database",
            "description": "Design and query a database for managing books, authors, and users.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "1_T1",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 1.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "1_T2",
                    "task_name": "Create Views",
                    "description": "Create Views for project 1.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "1_T3",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 1.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "1_T4",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 1.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "1_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 1.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "1_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 1.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "1_T7",
                    "task_name": "Create Views",
                    "description": "Create Views for project 1.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "1_T8",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 1.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S2",
            "project_name": "E-Commerce Orders",
            "description": "Analyze orders and customers from an e-commerce database.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "2_T1",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 2.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "2_T2",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 2.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "2_T3",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 2.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "2_T4",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 2.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "2_T5",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 2.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "2_T6",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 2.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S3",
            "project_name": "Student Grades System",
            "description": "Track students, courses, and grades in an academic system.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "3_T1",
                    "task_name": "Create Views",
                    "description": "Create Views for project 3.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "3_T2",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 3.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "3_T3",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 3.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "3_T4",
                    "task_name": "Create Views",
                    "description": "Create Views for project 3.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "3_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 3.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "3_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 3.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "3_T7",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 3.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S4",
            "project_name": "Hospital Management",
            "description": "Build queries to manage patients, doctors, and appointments.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "4_T1",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 4.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "4_T2",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 4.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "4_T3",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 4.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "4_T4",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 4.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "4_T5",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 4.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 6 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S5",
            "project_name": "Movie Database",
            "description": "Create and query a database of movies, actors, and reviews.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "5_T1",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T2",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 5.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T3",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 5.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T4",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T6",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 5.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T7",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 5.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T8",
                    "task_name": "Write Stored Procedures",
                    "description": "Write Stored Procedures for project 5.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T9",
                    "task_name": "Create Views",
                    "description": "Create Views for project 5.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "5_T10",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 5.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S6",
            "project_name": "HR Database",
            "description": "Manage employees, departments, salaries, and job history.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "6_T1",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 6.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "6_T2",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 6.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "6_T3",
                    "task_name": "Create Views",
                    "description": "Create Views for project 6.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "6_T4",
                    "task_name": "Create Views",
                    "description": "Create Views for project 6.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "6_T5",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 6.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "6_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 6.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "6_T7",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 6.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "6_T8",
                    "task_name": "Create Views",
                    "description": "Create Views for project 6.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 7 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S7",
            "project_name": "Online Food Delivery",
            "description": "Track orders, restaurants, and delivery agents in a food app.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "7_T1",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 7.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "7_T2",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 7.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "7_T3",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 7.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "7_T4",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 7.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "7_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 7.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "7_T6",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 7.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "7_T7",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 7.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "7_T8",
                    "task_name": "Create Views",
                    "description": "Create Views for project 7.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S8",
            "project_name": "Airline Reservation",
            "description": "Manage flights, bookings, customers, and schedules.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "8_T1",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 8.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T2",
                    "task_name": "Write Stored Procedures",
                    "description": "Write Stored Procedures for project 8.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T3",
                    "task_name": "Implement Subqueries",
                    "description": "Implement Subqueries for project 8.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T4",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 8.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T5",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 8.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T6",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 8.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T7",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 8.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T8",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 8.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T9",
                    "task_name": "Write Stored Procedures",
                    "description": "Write Stored Procedures for project 8.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 9 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "8_T10",
                    "task_name": "Create Views",
                    "description": "Create Views for project 8.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 9 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S9",
            "project_name": "Inventory Tracker",
            "description": "Track products, stock levels, suppliers, and orders.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "9_T1",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T2",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 9.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T3",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 9.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T4",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 9.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T5",
                    "task_name": "Insert Sample Data",
                    "description": "Insert Sample Data for project 9.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T6",
                    "task_name": "Use JOINs",
                    "description": "Use JOINs for project 9.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T7",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T8",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 9.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T9",
                    "task_name": "Manage Indexes",
                    "description": "Manage Indexes for project 9.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T10",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 9.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T11",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "9_T12",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 9.",
                    "steps": [
                        {
                            "step_id": "T12_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T12_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T12_S3",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T12_S4",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T12_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T12_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T12_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T12_S8",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 8 AS step_number;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "S10",
            "project_name": "Banking Transactions",
            "description": "Analyze bank customers, accounts, and transactions.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "10_T1",
                    "task_name": "Apply Aggregate Functions",
                    "description": "Apply Aggregate Functions for project 10.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T2",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 10.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T3",
                    "task_name": "Create Views",
                    "description": "Create Views for project 10.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T4",
                    "task_name": "Design Database Schema",
                    "description": "Design Database Schema for project 10.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T5",
                    "task_name": "Write Stored Procedures",
                    "description": "Write Stored Procedures for project 10.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T6",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 10.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T7",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 10.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T8",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 10.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Define Primary Keys",
                            "description": "Write and execute the SQL for Define Primary Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Define Primary Keys\n-- TODO: Write your SQL query for Define Primary Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Define Primary Keys\n-- Example solution for Define Primary Keys\nSELECT 'Define Primary Keys' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Create Indexes",
                            "description": "Write and execute the SQL for Create Indexes.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Create Indexes\n-- TODO: Write your SQL query for Create Indexes\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Create Indexes\n-- Example solution for Create Indexes\nSELECT 'Create Indexes' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Use Nested Queries",
                            "description": "Write and execute the SQL for Use Nested Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Nested Queries\n-- TODO: Write your SQL query for Use Nested Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Nested Queries\n-- Example solution for Use Nested Queries\nSELECT 'Use Nested Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T9",
                    "task_name": "Create Tables",
                    "description": "Create Tables for project 10.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Build Complex Queries",
                            "description": "Write and execute the SQL for Build Complex Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Build Complex Queries\n-- TODO: Write your SQL query for Build Complex Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Build Complex Queries\n-- Example solution for Build Complex Queries\nSELECT 'Build Complex Queries' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Use Foreign Keys",
                            "description": "Write and execute the SQL for Use Foreign Keys.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Use Foreign Keys\n-- TODO: Write your SQL query for Use Foreign Keys\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Use Foreign Keys\n-- Example solution for Use Foreign Keys\nSELECT 'Use Foreign Keys' AS step_name, 8 AS step_number;"
                        }
                    ]
                },
                {
                    "task_id": "10_T10",
                    "task_name": "Write SELECT Queries",
                    "description": "Write SELECT Queries for project 10.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 1 AS step_number;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 2 AS step_number;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Test and Optimize Queries",
                            "description": "Write and execute the SQL for Test and Optimize Queries.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Test and Optimize Queries\n-- TODO: Write your SQL query for Test and Optimize Queries\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Test and Optimize Queries\n-- Example solution for Test and Optimize Queries\nSELECT 'Test and Optimize Queries' AS step_name, 3 AS step_number;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Filter with WHERE",
                            "description": "Write and execute the SQL for Filter with WHERE.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Filter with WHERE\n-- TODO: Write your SQL query for Filter with WHERE\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Filter with WHERE\n-- Example solution for Filter with WHERE\nSELECT 'Filter with WHERE' AS step_name, 4 AS step_number;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Sort with ORDER BY",
                            "description": "Write and execute the SQL for Sort with ORDER BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Sort with ORDER BY\n-- TODO: Write your SQL query for Sort with ORDER BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Sort with ORDER BY\n-- Example solution for Sort with ORDER BY\nSELECT 'Sort with ORDER BY' AS step_name, 5 AS step_number;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Group with GROUP BY",
                            "description": "Write and execute the SQL for Group with GROUP BY.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Group with GROUP BY\n-- TODO: Write your SQL query for Group with GROUP BY\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Group with GROUP BY\n-- Example solution for Group with GROUP BY\nSELECT 'Group with GROUP BY' AS step_name, 6 AS step_number;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 7 AS step_number;"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Join Multiple Tables",
                            "description": "Write and execute the SQL for Join Multiple Tables.",
                            "guidelines": [
                                "1. Understand the schema and relationships between tables.",
                                "2. Plan the query structure before writing SQL code.",
                                "3. Check for proper use of SQL syntax and functions.",
                                "4. Validate the query with expected output examples.",
                                "5. Optimize the query for better performance if needed."
                            ],
                            "hints": [
                                "Use `INNER JOIN`, `LEFT JOIN`, or `RIGHT JOIN` depending on the requirement.",
                                "Group by fields that are not aggregated in the SELECT clause.",
                                "Indexes can speed up read-heavy operations on large datasets.",
                                "Use aliases (`AS`) to simplify column references.",
                                "Break down complex queries into smaller parts using subqueries or CTEs."
                            ],
                            "starting_code": "-- Starting code for Join Multiple Tables\n-- TODO: Write your SQL query for Join Multiple Tables\nSELECT * FROM your_table;",
                            "final_code": "-- Final code for Join Multiple Tables\n-- Example solution for Join Multiple Tables\nSELECT 'Join Multiple Tables' AS step_name, 8 AS step_number;"
                        }
                    ]
                }
            ]
        }
    ]
}