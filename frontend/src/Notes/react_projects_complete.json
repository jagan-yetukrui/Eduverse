{
    "projects": [
        {
            "project_id": "R1",
            "project_name": "Personal Portfolio",
            "description": "Build a personal portfolio site to showcase projects and skills.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "1_T1",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 1.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "1_T2",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 1.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "1_T3",
                    "task_name": "Add Styling",
                    "description": "Add Styling for project 1.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "1_T4",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 1.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "1_T5",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 1.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "1_T6",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 1.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R2",
            "project_name": "Task Manager",
            "description": "Create a to-do list app with CRUD functionality and filters.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "2_T1",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 2.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "2_T2",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 2.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "2_T3",
                    "task_name": "Create Components",
                    "description": "Create Components for project 2.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "2_T4",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 2.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "2_T5",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 2.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R3",
            "project_name": "Weather Dashboard",
            "description": "Display weather details from an API with real-time updates.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "3_T1",
                    "task_name": "Design Layout",
                    "description": "Design Layout for project 3.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "3_T2",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 3.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "3_T3",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 3.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "3_T4",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 3.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "3_T5",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 3.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "3_T6",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 3.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "3_T7",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 3.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R4",
            "project_name": "Recipe Finder",
            "description": "Search for recipes using an external API and display details.",
            "difficulty": "Beginner",
            "tasks": [
                {
                    "task_id": "4_T1",
                    "task_name": "Add Routing",
                    "description": "Add Routing for project 4.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "4_T2",
                    "task_name": "Design Layout",
                    "description": "Design Layout for project 4.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "4_T3",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 4.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "4_T4",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 4.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "4_T5",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 4.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "4_T6",
                    "task_name": "Add Styling",
                    "description": "Add Styling for project 4.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "4_T7",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 4.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                },
                {
                    "task_id": "4_T8",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 4.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R5",
            "project_name": "Expense Tracker",
            "description": "Track daily expenses with charts and budget insights.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "5_T1",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 5.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T2",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 5.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T3",
                    "task_name": "Add Routing",
                    "description": "Add Routing for project 5.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T4",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 5.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T5",
                    "task_name": "Design Layout",
                    "description": "Design Layout for project 5.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T6",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 5.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T7",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 5.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T8",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 5.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T9",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 5.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                },
                {
                    "task_id": "5_T10",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 5.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R6",
            "project_name": "Blog App",
            "description": "A blogging platform with markdown support and comments.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "6_T1",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 6.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T2",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 6.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T3",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 6.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T4",
                    "task_name": "Design Layout",
                    "description": "Design Layout for project 6.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T5",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 6.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T6",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 6.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T7",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 6.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T8",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 6.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T9",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 6.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "6_T10",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 6.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R7",
            "project_name": "Movie Browser",
            "description": "Browse movies by category using an open movie API.",
            "difficulty": "Intermediate",
            "tasks": [
                {
                    "task_id": "7_T1",
                    "task_name": "Add Styling",
                    "description": "Add Styling for project 7.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T2",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 7.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T3",
                    "task_name": "Add Routing",
                    "description": "Add Routing for project 7.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T4",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 7.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T5",
                    "task_name": "Create Components",
                    "description": "Create Components for project 7.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T6",
                    "task_name": "Create Components",
                    "description": "Create Components for project 7.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T7",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 7.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T8",
                    "task_name": "Add Styling",
                    "description": "Add Styling for project 7.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T9",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 7.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                },
                {
                    "task_id": "7_T10",
                    "task_name": "Create Components",
                    "description": "Create Components for project 7.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R8",
            "project_name": "E-Commerce Frontend",
            "description": "Frontend for an e-commerce site with cart and checkout.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "8_T1",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 8.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T2",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 8.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T3",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 8.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T4",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 8.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T5",
                    "task_name": "Add Routing",
                    "description": "Add Routing for project 8.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T6",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 8.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T7",
                    "task_name": "Create Components",
                    "description": "Create Components for project 8.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T8",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 8.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T9",
                    "task_name": "Add Styling",
                    "description": "Add Styling for project 8.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T10",
                    "task_name": "Add Styling",
                    "description": "Add Styling for project 8.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                },
                {
                    "task_id": "8_T11",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 8.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T11_S9",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R9",
            "project_name": "Chat Interface",
            "description": "A real-time chat UI using WebSockets or Firebase.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "9_T1",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 9.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T2",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 9.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T3",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 9.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T4",
                    "task_name": "Design Layout",
                    "description": "Design Layout for project 9.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T5",
                    "task_name": "Design Layout",
                    "description": "Design Layout for project 9.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T6",
                    "task_name": "Add Routing",
                    "description": "Add Routing for project 9.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T7",
                    "task_name": "Add Routing",
                    "description": "Add Routing for project 9.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T8",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 9.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T9",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 9.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                },
                {
                    "task_id": "9_T10",
                    "task_name": "Create Components",
                    "description": "Create Components for project 9.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        }
                    ]
                }
            ]
        },
        {
            "project_id": "R10",
            "project_name": "Fitness Tracker",
            "description": "Track workouts and visualize progress using charts.",
            "difficulty": "Advanced",
            "tasks": [
                {
                    "task_id": "10_T1",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 10.",
                    "steps": [
                        {
                            "step_id": "T1_S1",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T1_S2",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T1_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T1_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T1_S5",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T1_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T1_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T1_S8",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T1_S9",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T1_S10",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T2",
                    "task_name": "Handle User Input",
                    "description": "Handle User Input for project 10.",
                    "steps": [
                        {
                            "step_id": "T2_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T2_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T2_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T2_S4",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T2_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T2_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T2_S7",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T2_S8",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T2_S9",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T2_S10",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T3",
                    "task_name": "Manage Forms",
                    "description": "Manage Forms for project 10.",
                    "steps": [
                        {
                            "step_id": "T3_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T3_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T3_S3",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T3_S4",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T3_S5",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T3_S6",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T3_S7",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T3_S8",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T3_S9",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T3_S10",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T4",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 10.",
                    "steps": [
                        {
                            "step_id": "T4_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T4_S2",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T4_S3",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T4_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T4_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T4_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T4_S7",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T4_S8",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T4_S9",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T4_S10",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T5",
                    "task_name": "Implement State Management",
                    "description": "Implement State Management for project 10.",
                    "steps": [
                        {
                            "step_id": "T5_S1",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T5_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T5_S3",
                            "step_name": "Deploy Project",
                            "description": "Implement the logic for Deploy Project.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Deploy Project\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Deploy Project */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Deploy Project\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T5_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T5_S5",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T5_S6",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T5_S7",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T5_S8",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T5_S9",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T5_S10",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T6",
                    "task_name": "Project Setup",
                    "description": "Project Setup for project 10.",
                    "steps": [
                        {
                            "step_id": "T6_S1",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T6_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T6_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T6_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T6_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T6_S6",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T6_S7",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T6_S8",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T6_S9",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T6_S10",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T7",
                    "task_name": "Create Components",
                    "description": "Create Components for project 10.",
                    "steps": [
                        {
                            "step_id": "T7_S1",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T7_S2",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T7_S3",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T7_S4",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T7_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T7_S6",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T7_S7",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T7_S8",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T7_S9",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T7_S10",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T8",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 10.",
                    "steps": [
                        {
                            "step_id": "T8_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T8_S2",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T8_S3",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T8_S4",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T8_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T8_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T8_S7",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T8_S8",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T8_S9",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T8_S10",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T9",
                    "task_name": "Optimize Performance",
                    "description": "Optimize Performance for project 10.",
                    "steps": [
                        {
                            "step_id": "T9_S1",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T9_S2",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T9_S3",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T9_S4",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T9_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T9_S6",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T9_S7",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T9_S8",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T9_S9",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T9_S10",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T10",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 10.",
                    "steps": [
                        {
                            "step_id": "T10_S1",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T10_S2",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T10_S3",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T10_S4",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T10_S5",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T10_S6",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T10_S7",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T10_S8",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T10_S9",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T10_S10",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T11",
                    "task_name": "Integrate API",
                    "description": "Integrate API for project 10.",
                    "steps": [
                        {
                            "step_id": "T11_S1",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T11_S2",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T11_S3",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T11_S4",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T11_S5",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T11_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T11_S7",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T11_S8",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T11_S9",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T11_S10",
                            "step_name": "Apply CSS Modules",
                            "description": "Implement the logic for Apply CSS Modules.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Apply CSS Modules\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Apply CSS Modules */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Apply CSS Modules\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                },
                {
                    "task_id": "10_T12",
                    "task_name": "Create Components",
                    "description": "Create Components for project 10.",
                    "steps": [
                        {
                            "step_id": "T12_S1",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step1() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step1;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step1() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 1: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step1;"
                        },
                        {
                            "step_id": "T12_S2",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step2() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step2;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 2: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step2;"
                        },
                        {
                            "step_id": "T12_S3",
                            "step_name": "Fetch Data",
                            "description": "Implement the logic for Fetch Data.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Fetch Data\nimport React from 'react';\n\nfunction Step3() {\n    return (\n        <div>\n            {{/* TODO: Implement Fetch Data */}}\n        </div>\n    );\n}\n\nexport default Step3;",
                            "final_code": "// Final code for Fetch Data\nimport React, { useState } from 'react';\n\nfunction Step3() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 3: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step3;"
                        },
                        {
                            "step_id": "T12_S4",
                            "step_name": "Use useEffect",
                            "description": "Implement the logic for Use useEffect.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useEffect\nimport React from 'react';\n\nfunction Step4() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useEffect */}}\n        </div>\n    );\n}\n\nexport default Step4;",
                            "final_code": "// Final code for Use useEffect\nimport React, { useState } from 'react';\n\nfunction Step4() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 4: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step4;"
                        },
                        {
                            "step_id": "T12_S5",
                            "step_name": "Validate Input",
                            "description": "Implement the logic for Validate Input.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Validate Input\nimport React from 'react';\n\nfunction Step5() {\n    return (\n        <div>\n            {{/* TODO: Implement Validate Input */}}\n        </div>\n    );\n}\n\nexport default Step5;",
                            "final_code": "// Final code for Validate Input\nimport React, { useState } from 'react';\n\nfunction Step5() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 5: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step5;"
                        },
                        {
                            "step_id": "T12_S6",
                            "step_name": "Map Data to JSX",
                            "description": "Implement the logic for Map Data to JSX.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Map Data to JSX\nimport React from 'react';\n\nfunction Step6() {\n    return (\n        <div>\n            {{/* TODO: Implement Map Data to JSX */}}\n        </div>\n    );\n}\n\nexport default Step6;",
                            "final_code": "// Final code for Map Data to JSX\nimport React, { useState } from 'react';\n\nfunction Step6() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 6: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step6;"
                        },
                        {
                            "step_id": "T12_S7",
                            "step_name": "Define Props",
                            "description": "Implement the logic for Define Props.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Define Props\nimport React from 'react';\n\nfunction Step7() {\n    return (\n        <div>\n            {{/* TODO: Implement Define Props */}}\n        </div>\n    );\n}\n\nexport default Step7;",
                            "final_code": "// Final code for Define Props\nimport React, { useState } from 'react';\n\nfunction Step7() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 7: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step7;"
                        },
                        {
                            "step_id": "T12_S8",
                            "step_name": "Use useState Hook",
                            "description": "Implement the logic for Use useState Hook.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Use useState Hook\nimport React from 'react';\n\nfunction Step8() {\n    return (\n        <div>\n            {{/* TODO: Implement Use useState Hook */}}\n        </div>\n    );\n}\n\nexport default Step8;",
                            "final_code": "// Final code for Use useState Hook\nimport React, { useState } from 'react';\n\nfunction Step8() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 8: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step8;"
                        },
                        {
                            "step_id": "T12_S9",
                            "step_name": "Create Component File",
                            "description": "Implement the logic for Create Component File.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Create Component File\nimport React from 'react';\n\nfunction Step9() {\n    return (\n        <div>\n            {{/* TODO: Implement Create Component File */}}\n        </div>\n    );\n}\n\nexport default Step9;",
                            "final_code": "// Final code for Create Component File\nimport React, { useState } from 'react';\n\nfunction Step9() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 9: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step9;"
                        },
                        {
                            "step_id": "T12_S10",
                            "step_name": "Handle Events",
                            "description": "Implement the logic for Handle Events.",
                            "guidelines": [
                                "1. Understand the functionality expected in this step.",
                                "2. Determine which component or hook best fits the purpose.",
                                "3. Plan your props and states structure accordingly.",
                                "4. Test interactions at each step for UI feedback.",
                                "5. Refactor the code as needed for reusability."
                            ],
                            "hints": [
                                "Consider using `useState` for local component state.",
                                "Use `useEffect` to handle side effects like data fetching.",
                                "Remember to pass props from parent to child components.",
                                "Use `map()` to render lists of components.",
                                "Use a controlled component approach for form fields."
                            ],
                            "starting_code": "// Starting code for Handle Events\nimport React from 'react';\n\nfunction Step10() {\n    return (\n        <div>\n            {{/* TODO: Implement Handle Events */}}\n        </div>\n    );\n}\n\nexport default Step10;",
                            "final_code": "// Final code for Handle Events\nimport React, { useState } from 'react';\n\nfunction Step10() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Step 10: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increase</button>\n        </div>\n    );\n}\n\nexport default Step10;"
                        }
                    ]
                }
            ]
        }
    ]
}